{"version":3,"sources":["reducers/alertReducer.js","constants/indicators.js","reducers/indicatorsReducer.js","constants/statistic.js","reducers/statisticReducer.js","constants/loading.js","reducers/loadingReducer.js","constants/categories.js","reducers/categoriesReducer.js","reducers/index.js","constants/alert.js","store.js","config/server.js","actions/alertAction.js","actions/statisticAction.js","actions/indicatorsAction.js","components/MapAnimation.jsx","constants/helpers.js","components/IndicatorModal.jsx","components/Map.jsx","components/IndicatorsModal.jsx","components/MapWithBars.jsx","components/StatisticHeader.jsx","components/ColorPickerButton.jsx","components/TabPanel.jsx","containers/MapTab.jsx","containers/withSettingsPanel.jsx","containers/MainTable.jsx","containers/TableTab.jsx","containers/RegionTable.jsx","containers/RegionRating.jsx","containers/IndicatorTable.jsx","containers/IndicatorRating.jsx","components/LineDiagram.jsx","components/BarDiagram.jsx","components/RadarDiagram.jsx","containers/DiagramsTab.jsx","components/VertualizedSelect.jsx","components/IndicatorSelectorCard.jsx","containers/App.jsx","actions/categoriesAction.js","containers/AlertContainer.jsx","theme/palette.js","theme/typography.js","theme/index.js","theme/overrides/index.js","theme/overrides/MuiButton.js","theme/overrides/MuiCardActions.js","theme/overrides/MuiCardContent.js","theme/overrides/MuiCardHeader.js","theme/overrides/MuiChip.js","theme/overrides/MuiIconButton.js","theme/overrides/MuiInputBase.js","theme/overrides/MuiLinearProgress.js","theme/overrides/MuiListItem.js","theme/overrides/MuiListItemIcon.js","theme/overrides/MuiOutlinedInput.js","theme/overrides/MuiPaper.js","theme/overrides/MuiTableCell.js","theme/overrides/MuiTableHead.js","theme/overrides/MuiTableRow.js","theme/overrides/MuiToggleButton.js","theme/overrides/MuiTypography.js","containers/TopAppBar.jsx","index.js"],"names":["initialState","message","type","text","setAlertOpen","indicators","statistic","mapStatistic","mapRegions","diagramStatistic","radarDiagramStatistic","years","regions","top","isLoading","categories","rootReducer","combineReducers","alert","state","action","payload","items","loading","logger","createLogger","store","createStore","applyMiddleware","thunk","config","protocol","server","port","handleError","dispatch","err","callBackIfLocalErr","console","log","require","getStatisticByIndicator","indicator","a","formattedRegions","map","region","reg_ID","fetch","id","method","headers","Authorization","localStorage","getItem","body","JSON","stringify","response","json","error","Error","connect","setSelectedYear","year","marks","onPlayClick","onPauseClick","onStopClick","onReplayClick","el","value","Grid","container","justify","item","xs","Slider","min","max","length","onChange","e","newValue","valueLabelDisplay","randomColor","randomInt","Math","floor","random","h","s","l","addOrdinalToNumber","labelValue","abs","Number","toFixed","IndicatorModal","selectedRegion","currentIndicator","onClose","beautifulValue","replace","style","fontFamily","fontSize","lineHeight","fontStyle","fontWeight","display","justifyContent","alignItems","Region","reg_alias_human_name","IconButton","component","size","onClick","padding","title","width","textAlign","Divider","height","orientation","measurement_unit","memo","props","handleTooltipChange","selectedYear","isLegendIntervaled","colors","isRegionsSigned","colorsCount","mainMapColor","mapFontColor","mapBorderColor","mapFontSize","legendFontSize","isRegionNames3Letters","legendFontColor","React","useState","setSelectedRegion","coordinates","zoom","position","setPosition","anchorEl","useRef","onCloseRegionPopover","event","active","document","querySelector","classList","remove","handleClick","geo","target","add","quantize","scaleQuantize","domain","range","colorScale","scaleLinear","step","legendItems","Array","from","keys","paddingTop","paddingBottom","ref","background","right","flexDirection","color","listStyle","margin","marginRight","marginTop","borderRadius","index","key","invertExtent","values","projection","geoConicEqualArea","scale","center","parallels","rotate","translate","minZoom","maxZoom","onMoveEnd","geography","data-tip","data-for","geographies","Object","properties","rsmKey","onMouseEnter","onMouseLeave","className","default","fill","outline","stroke","strokeWidth","pressed","hover","centroid","geoCentroid","cur","x","alignmentBaseline","reg_alias_short_3letters","reg_alias_short_2letters","left","transform","ButtonGroup","variant","Button","pos","Popover","current","open","Boolean","anchorOrigin","vertical","horizontal","transformOrigin","prevProps","nextProps","isTooltipOpen","IndicatorsModal","indicatorsStatistic","selectedIndicators","beautifulValues","Indicator","reg_alias_fias_id","val","indicatorsColors","statisticIndicators","indicatorsCount","find","parseInt","i","barScale","xPosition","y","StatisticHeader","selectedYears","ColorPickerButton","setState","displayColorPicker","handleClose","handleChange","hex","handleChangeComplete","handleColorChange","this","minWidth","zIndex","bottom","onChangeComplete","Component","TabPanel","children","other","Typography","role","hidden","aria-labelledby","Box","p","timeout","ms","Promise","resolve","setTimeout","getStatisticForMap","formattedIndicators","WrappedComponent","getTabProps","settingsButton","createRef","name","handleColorsCountChange","persist","test","prevState","difference","newColors","splice","handleFontSizeChange","handleColorsChange","handleLegendIntervaledChange","checked","handleCheckboxChange","handleTabChange","currentTab","handleSelectedIndicatorsChange","handleIndicatorColorsChange","isSettingsOpened","isRegionNames2Letters","Popper","Paper","elevation","square","Tabs","indicatorColor","textColor","Tab","label","direction","spacing","isBar","maxWidth","border","FormControlLabel","control","Checkbox","marginLeft","TextField","fullWidth","inputProps","InputLabelProps","shrink","flexFlow","reduce","r","withSettingsPanel","setSelectedIndicators","tooltip","setTooltip","isAnimating","setIsAnimating","useEffect","ProcessAnimation","currentPosition","findIndex","newPosition","Autocomplete","options","multiple","noOptionsText","disableCloseOnSelect","renderTags","getTagProps","Chip","getOptionLabel","option","renderInput","params","renderOption","selected","getOptionSelected","MapWithBars","effect","clickable","place","data","TableContainer","Table","TableHead","TableRow","TableCell","TableBody","statisticRow","setSelectedYears","selectedRegions","setSelectedRegions","setAnchorEl","FormControl","InputLabel","Select","labelId","input","Input","renderValue","reg","join","MenuProps","getContentAnchorEl","MenuItem","indexOf","ListItemText","primary","paddingRight","startIcon","currentTarget","Menu","keepMounted","objectData","window","navigator","msSaveOrOpenBlob","blob","Blob","decodeURIComponent","encodeURI","createElement","download","href","encodeURIComponent","appendChild","click","removeChild","exportToJson","opts","fields","csv","Parser","parse","exportToCSV","flattenData","stat","Индикатор","Регион","Год","Значение","excel","json2excel","formateDate","exportToXLSX","RegionTable","getStatisticForRegionTop","IndicatorTable","getStatisticForIndicatorTop","selectedIndicator","setSelectedIndicator","LineDiagram","opacity","setOpacity","setColors","yKeys","filter","dataKey","strokeOpacity","activeDot","o","strokeDasharray","unit","BarDiagram","RadarDiagram","outerRadius","fillOpacity","getStatisticForDiagram","getStatisticForRadarDiagram","selectedDiagram","setSelectedDiagram","diagrams","line","bar","radar","clsx","renderRow","cloneElement","OuterElementContext","createContext","OuterElementType","forwardRef","outerProps","useContext","ListboxComponent","itemData","Children","toArray","theme","useTheme","smUp","useMediaQuery","breakpoints","up","noSsr","itemCount","itemSize","getChildSize","child","isValidElement","ListSubheader","gridRef","resetAfterIndex","useResetCache","Provider","b","outerElementType","innerElementType","overscanCount","useStyles","makeStyles","listbox","boxSizing","VirtualizedSelect","rest","classes","disableListWrap","noWrap","IndicatorSelectorCard","handleSelectedCatogories","selectedCatogories","handleCurrentIndicatorChange","category","getIndicators","formattedCategories","getCategories","setCurrentTab","selectedRatingType","setSelectedRatingType","setCurrentIndicator","setSelectedCatogories","Container","LinearProgress","FormLabel","RadioGroup","aria-label","Radio","Alert","AlertContainer","bind","reason","closeAlert","Snackbar","autoHideDuration","severity","contrastText","dark","indigo","main","light","secondary","blue","A700","A400","red","blueGrey","link","icon","paper","divider","grey","h1","palette","letterSpacing","h2","h3","h4","h5","h6","subtitle1","subtitle2","body1","body2","button","caption","overline","textTransform","baseTheme","typography","overrides","MuiButton","contained","boxShadow","backgroundColor","MuiCardActions","root","MuiCardContent","MuiCardHeader","MuiChip","deletable","MuiIconButton","MuiInputBase","MuiLinearProgress","overflow","colorPrimary","MuiListItem","MuiListItemIcon","MuiOutlinedInput","notchedOutline","borderColor","MuiPaper","elevation1","MuiTableCell","borderBottom","MuiTableHead","MuiTableRow","MuiToggleButton","borderTopLeftRadius","borderBottomLeftRadius","borderTopRightRadius","borderBottomRightRadius","MuiTypography","gutterBottom","marginBottom","createMuiTheme","TopAppBar","signOut","driverIsOpen","AppBar","Toolbar","Hidden","xsDown","to","white","Drawer","anchor","List","subheader","withRouter","ReactDOM","render","ThemeProvider","getElementById"],"mappings":"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","file":"static/js/main.484b4170.chunk.js","sourcesContent":["import { CLOSE_ALERT, OPEN_ALERT } from '../constants/alert';\n\nconst initialState = {\n  message: {\n    type: '',\n    text: '',\n  },\n  setAlertOpen: false,\n};\n\nexport function alertReducer(state = initialState, action) {\n  switch (action.type) {\n    case CLOSE_ALERT:\n      return {\n        ...state,\n        message: {},\n        setAlertOpen: false,\n      };\n    case OPEN_ALERT:\n      return {\n        ...state,\n        setAlertOpen: true,\n        message: action.payload.message,\n      };\n    default:\n      return state;\n  }\n}\n","export const GET_INDICATORS = 'GET_INDICATORS';\n","import { GET_INDICATORS } from '../constants/indicators';\n\nconst initialState = {\n  indicators: [],\n};\n\nexport function indicatorsReducer(state = initialState, action) {\n  switch (action.type) {\n    case GET_INDICATORS:\n      return {\n        ...state,\n        indicators: action.payload.items,\n      };\n    default:\n      return state;\n  }\n}\n","export const GET_STATISTIC = 'GET_STATISTIC';\nexport const GET_DIAGRAM_STATISTIC = 'GET_DIAGRAM_STATISTIC';\nexport const GET_MAP_STATISTIC = 'GET_MAP_STATISTIC';\nexport const GET_RADAR_DIAGRAM_STATISTIC = 'GET_RADAR_DIAGRAM_STATISTIC';\nexport const GET_REGION_TOP_STATISTIC = 'GET_REGION_TOP_STATISTIC';\nexport const GET_INDICATOR_TOP_STATISTIC = 'GET_INDICATOR_TOP_STATISTIC';\n","import {\n  GET_STATISTIC,\n  GET_MAP_STATISTIC,\n  GET_DIAGRAM_STATISTIC,\n  GET_RADAR_DIAGRAM_STATISTIC,\n  GET_REGION_TOP_STATISTIC,\n  GET_INDICATOR_TOP_STATISTIC,\n} from '../constants/statistic';\n\nconst initialState = {\n  statistic: [],\n  mapStatistic: {},\n  mapRegions: {},\n  diagramStatistic: [],\n  radarDiagramStatistic: [],\n  years: [],\n  regions: [],\n  top: [],\n};\n\nexport function statisticReducer(state = initialState, action) {\n  switch (action.type) {\n    case GET_STATISTIC:\n      return {\n        ...state,\n        statistic: action.payload.items,\n        years: action.payload.years,\n        regions: action.payload.regions,\n      };\n    case GET_MAP_STATISTIC:\n      return {\n        ...state,\n        mapStatistic: action.payload.items,\n        mapRegions: action.payload.regions,\n        years: action.payload.years,\n      };\n    case GET_DIAGRAM_STATISTIC:\n      return {\n        ...state,\n        diagramStatistic: action.payload.items,\n        years: action.payload.years,\n        regions: action.payload.regions,\n      };\n    case GET_RADAR_DIAGRAM_STATISTIC:\n      return {\n        ...state,\n        radarDiagramStatistic: action.payload.items,\n        years: action.payload.years,\n        regions: action.payload.regions,\n      };\n    case GET_REGION_TOP_STATISTIC:\n      return {\n        ...state,\n        top: action.payload.items,\n      };\n    case GET_INDICATOR_TOP_STATISTIC:\n      return {\n        ...state,\n        top: action.payload.items,\n      };\n    default:\n      return state;\n  }\n}\n","export const DATA_LOADED = 'DATA_LOADED';\nexport const DATA_LOADING = 'DATA_LOADING';\n","import { DATA_LOADING, DATA_LOADED } from '../constants/loading';\n\nconst initialState = {\n  isLoading: false,\n};\n\nexport function loadingReducer(state = initialState, action) {\n  switch (action.type) {\n    case DATA_LOADING:\n      return {\n        ...state,\n        isLoading: true,\n      };\n    case DATA_LOADED:\n      return {\n        ...state,\n        isLoading: false,\n      };\n    default:\n      return state;\n  }\n}\n","export const GET_CATEGORIES = 'GET_CATEGORIES';\n","import { GET_CATEGORIES } from '../constants/categories';\n\nconst initialState = {\n  categories: [],\n};\n\nexport function categoriesReducer(state = initialState, action) {\n  switch (action.type) {\n    case GET_CATEGORIES:\n      return {\n        ...state,\n        categories: action.payload.items,\n      };\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux';\nimport { alertReducer } from './alertReducer';\nimport { indicatorsReducer } from './indicatorsReducer';\nimport { statisticReducer } from './statisticReducer';\nimport { loadingReducer } from './loadingReducer';\nimport { categoriesReducer } from './categoriesReducer';\n\nconst rootReducer = combineReducers({\n  alert: alertReducer,\n  indicators: indicatorsReducer,\n  categories: categoriesReducer,\n  statistic: statisticReducer,\n  loading: loadingReducer,\n});\n\nexport default rootReducer;\n","export const CLEAR_ALERT = 'CLEAR_ALERT';\nexport const CLOSE_ALERT = 'CLOSE_ALERT';\nexport const OPEN_ALERT = 'OPEN_ALERT';\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport rootReducer from './reducers';\n\nconst logger = createLogger();\nconst store = createStore(rootReducer, applyMiddleware(thunk, logger));\n\nexport default store;\n","const config = {\n  protocol: 'http',\n  server: '127.0.0.1',\n  port: '5000',\n};\n\nexport default config;\n","import { OPEN_ALERT, CLOSE_ALERT } from '../constants/alert';\n\nexport function handleError(dispatch, err, callBackIfLocalErr) {\n  // if (err.response.data.type === 'local') {\n  //   callBackIfLocalErr();\n  // } else {\n  //   dispatch({\n  //     type: OPEN_ALERT,\n  //     payload: { message: { text: err.response.data.text, type: 'error' } },\n  //   });\n  // }\n  console.log(err);\n  // dispatch({\n  //   type: OPEN_ALERT,\n  //   payload: { message: { text: err, type: 'error' } },\n  // });\n}\nexport function closeAlert() {\n  return dispatch => dispatch({\n    type: CLOSE_ALERT,\n  });\n}\nexport function openAlert(message) {\n  return dispatch => dispatch({\n    type: OPEN_ALERT,\n    payload: message,\n  });\n}\n","import {\n  GET_STATISTIC,\n  GET_MAP_STATISTIC,\n  GET_DIAGRAM_STATISTIC,\n  GET_REGION_TOP_STATISTIC,\n  GET_INDICATOR_TOP_STATISTIC,\n  GET_RADAR_DIAGRAM_STATISTIC,\n} from '../constants/statistic';\nimport config from '../config/server';\nimport { handleError } from './alertAction';\nimport { handleLoadingFinished, handleLoadingStarted } from './loadingAction';\n\n\nconst qs = require('qs');\n\nexport const getStatisticByIndicator = ({ indicator, years = [], regions = [] }) => async dispatch => {\n  try {\n    handleLoadingStarted();\n    // const url = new URL(\n    //   `${config.protocol}://${config.server}:${config.port}/api/statistics/indicator/${indicator.id}`,\n    // );\n    // const params = qs.stringify(\n    //   years,\n    // );\n    // url.search = params;\n\n    // const response = await fetch(url, {\n    //   method: 'get',\n    //   headers: {\n    //     Authorization: localStorage.getItem('token'),\n    //     'Content-type': 'application/json; charset=UTF-8',\n    //   },\n    // });\n    const formattedRegions = regions.map((region) => region.reg_ID);\n    const response = await fetch(\n      `${config.protocol}://${config.server}:${config.port}/api/statistics/indicator/${indicator.id}`,\n      {\n        method: 'post',\n        headers: {\n          Authorization: localStorage.getItem('token'),\n          'Content-type': 'application/json; charset=UTF-8',\n        },\n        body: JSON.stringify({\n          years,\n          regions: formattedRegions,\n        }),\n      },\n    );\n\n    const json = await response.json();\n\n    if (json.error) {\n      throw new Error(json.message);\n    }\n\n    dispatch({\n      type: GET_STATISTIC,\n      payload: {\n        items: json.statistic,\n        years: json.years,\n        regions: json.regions,\n      },\n    });\n  } catch (err) {\n    handleError(dispatch, err);\n  } finally {\n    handleLoadingFinished();\n  }\n};\n\nexport const getStatisticForRadarDiagram = ({ indicator, years = [], regions = [] }) => async dispatch => {\n  try {\n    handleLoadingStarted();\n\n    const formattedRegions = regions.map((region) => region.reg_ID);\n    const response = await fetch(\n      `${config.protocol}://${config.server}:${config.port}/api//statistics/radar-diagram/indicator/${indicator.id}`,\n      {\n        method: 'post',\n        headers: {\n          Authorization: localStorage.getItem('token'),\n          'Content-type': 'application/json; charset=UTF-8',\n        },\n        body: JSON.stringify({\n          years,\n          regions: formattedRegions,\n        }),\n      },\n    );\n\n    const json = await response.json();\n\n    if (json.error) {\n      throw new Error(json.message);\n    }\n\n    dispatch({\n      type: GET_RADAR_DIAGRAM_STATISTIC,\n      payload: {\n        items: json.statistic,\n        years: json.years,\n        regions: json.regions,\n      },\n    });\n  } catch (err) {\n    handleError(dispatch, err);\n  } finally {\n    handleLoadingFinished();\n  }\n};\n\nexport const getStatisticForDiagram = ({ indicator, years = [], regions = [] }) => async dispatch => {\n  try {\n    // const url = new URL(\n    //   `${config.protocol}://${config.server}:${config.port}/api/statistics/indicator/${indicator.id}`,\n    // );\n    // const params = qs.stringify(\n    //   years,\n    // );\n    // url.search = params;\n\n    // const response = await fetch(url, {\n    //   method: 'get',\n    //   headers: {\n    //     Authorization: localStorage.getItem('token'),\n    //     'Content-type': 'application/json; charset=UTF-8',\n    //   },\n    // });\n    handleLoadingStarted();\n\n    const formattedRegions = regions.map((region) => region.reg_ID);\n    const response = await fetch(\n      `${config.protocol}://${config.server}:${config.port}/api/statistics/diagram/indicator/${indicator.id}`,\n      {\n        method: 'post',\n        headers: {\n          Authorization: localStorage.getItem('token'),\n          'Content-type': 'application/json; charset=UTF-8',\n        },\n        body: JSON.stringify({\n          years,\n          regions: formattedRegions,\n        }),\n      },\n    );\n\n    const json = await response.json();\n\n    if (json.error) {\n      throw new Error(json.message);\n    }\n\n    dispatch({\n      type: GET_DIAGRAM_STATISTIC,\n      payload: {\n        items: json.statistic,\n        years: json.years,\n        regions: json.regions,\n      },\n    });\n  } catch (err) {\n    handleError(dispatch, err);\n  } finally {\n    handleLoadingFinished();\n  }\n};\n\nexport const getStatisticForMap = (indicators) => async dispatch => {\n  try {\n    handleLoadingStarted();\n    const formattedIndicators = indicators.map((indicator) => indicator.id);\n    const response = await fetch(\n      `${config.protocol}://${config.server}:${config.port}/api/statistics/map/indicators`,\n      {\n        method: 'post',\n        headers: {\n          Authorization: localStorage.getItem('token'),\n          'Content-type': 'application/json; charset=UTF-8',\n        },\n        body: JSON.stringify({\n          indicators: formattedIndicators,\n        }),\n      },\n    );\n\n    const json = await response.json();\n\n    if (json.error) {\n      throw new Error(json.message);\n    }\n\n    dispatch({\n      type: GET_MAP_STATISTIC,\n      payload: {\n        items: json.items,\n        regions: json.regions,\n        years: json.years,\n      },\n    });\n  } catch (err) {\n    handleError(dispatch, err);\n  } finally {\n    handleLoadingFinished();\n  }\n};\n\nexport const getStatisticForRegionTop = ({ region, year }) => async dispatch => {\n  try {\n    handleLoadingStarted();\n\n    const response = await fetch(\n      `${config.protocol}://${config.server}:${config.port}/api/statistics/top/region/${region.reg_ID}`,\n      {\n        method: 'post',\n        headers: {\n          Authorization: localStorage.getItem('token'),\n          'Content-type': 'application/json; charset=UTF-8',\n        },\n        body: JSON.stringify({\n          year,\n        }),\n      },\n    );\n\n    const json = await response.json();\n\n    if (json.error) {\n      throw new Error(json.message);\n    }\n\n    dispatch({\n      type: GET_REGION_TOP_STATISTIC,\n      payload: {\n        items: json.statistic,\n      },\n    });\n  } catch (err) {\n    handleError(dispatch, err);\n  } finally {\n    handleLoadingFinished();\n  }\n};\n\nexport const getStatisticForIndicatorTop = ({ indicator, year }) => async dispatch => {\n  try {\n    handleLoadingStarted();\n\n    const response = await fetch(\n      `${config.protocol}://${config.server}:${config.port}/api/statistics/top/indicator/${indicator.id}`,\n      {\n        method: 'post',\n        headers: {\n          Authorization: localStorage.getItem('token'),\n          'Content-type': 'application/json; charset=UTF-8',\n        },\n        body: JSON.stringify({\n          year,\n        }),\n      },\n    );\n\n    const json = await response.json();\n\n    if (json.error) {\n      throw new Error(json.message);\n    }\n\n    dispatch({\n      type: GET_INDICATOR_TOP_STATISTIC,\n      payload: {\n        items: json.statistic,\n      },\n    });\n  } catch (err) {\n    handleError(dispatch, err);\n  } finally {\n    handleLoadingFinished();\n  }\n};\n","import { GET_INDICATORS } from '../constants/indicators';\nimport config from '../config/server';\nimport { handleError } from './alertAction';\nimport { handleLoadingFinished, handleLoadingStarted } from './loadingAction';\n\nexport const getIndicators = (categories = []) => async dispatch => {\n  try {\n    handleLoadingStarted();\n    const formattedCategories = categories.map((category) => category.id);\n    const response = await fetch(\n      `${config.protocol}://${config.server}:${config.port}/api/indicators`,\n      {\n        method: 'post',\n        headers: {\n          Authorization: localStorage.getItem('token'),\n          'Content-type': 'application/json; charset=UTF-8',\n        },\n        body: JSON.stringify({\n          categories: formattedCategories,\n        }),\n      },\n    );\n\n    const json = await response.json();\n\n    if (json.error) {\n      throw new Error(json.message);\n    }\n    dispatch({\n      type: GET_INDICATORS,\n      payload: {\n        items: json.items,\n      },\n    });\n    // dispatch({\n    //   type: OPEN_ALERT,\n    //   payload: {\n    //     message: { text: \"Пользователь успешно создан.\", type: \"success\" }\n    //   }\n    // });\n  } catch (err) {\n    handleError(dispatch, err);\n  } finally {\n    handleLoadingFinished();\n  }\n};\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport PlayArrowSharpIcon from '@material-ui/icons/PlayArrowSharp';\nimport PauseSharpIcon from '@material-ui/icons/PauseSharp';\nimport ReplaySharpIcon from '@material-ui/icons/ReplaySharp';\nimport StopSharpIcon from '@material-ui/icons/StopSharp';\nimport {\n  IconButton,\n  Grid,\n  Slider,\n} from '@material-ui/core';\n\n\nconst MapAnimation = ({\n  setSelectedYear,\n  years,\n  year,\n  onPlayClick,\n  onPauseClick,\n  onStopClick,\n  onReplayClick,\n}) => {\n  const marks = years.map((el) => ({ value: el }));\n  return (\n    <>\n      <Grid container justify=\"center\">\n        <Grid item xs={4}>\n          <Slider\n            min={years[0]}\n            marks={marks}\n            max={years[years.length - 1]}\n            value={year}\n            onChange={(e, newValue) => setSelectedYear(newValue)}\n            // valueLabelDisplay=\"auto\"\n            valueLabelDisplay=\"on\"\n          />\n        </Grid>\n      </Grid>\n      {/* <Grid container justify=\"center\">\n        <IconButton\n          aria-label=\"play\"\n          onClick={onPlayClick}\n        >\n          <PlayArrowSharpIcon />\n        </IconButton>\n        <IconButton\n          aria-label=\"pause\"\n          onClick={onPauseClick}\n        >\n          <PauseSharpIcon />\n        </IconButton>\n        <IconButton\n          aria-label=\"stop\"\n          onClick={onStopClick}\n        >\n          <StopSharpIcon />\n        </IconButton>\n        <IconButton\n          aria-label=\"replay\"\n          onClick={onReplayClick}\n        >\n          <ReplaySharpIcon />\n        </IconButton>\n      </Grid> */}\n    </>\n  );\n};\n\nexport default connect(\n  state => {\n    return {\n    };\n  },\n  {\n  },\n)(MapAnimation);\n","import { json2excel } from 'js2excel';\nimport { Parser } from 'json2csv';\n\nexport const randomColor = (() => {\n  const randomInt = (min, max) => {\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  };\n\n  return () => {\n    const h = randomInt(0, 360);\n    const s = randomInt(42, 98);\n    const l = randomInt(40, 90);\n    return `hsl(${h},${s}%,${l}%)`;\n  };\n})();\n\nexport const exportToJson = (objectData) => {\n  const filename = 'export.json';\n  const contentType = 'application/json;charset=utf-8;';\n  if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n    const blob = new Blob([decodeURIComponent(encodeURI(JSON.stringify(objectData)))], { type: contentType });\n    navigator.msSaveOrOpenBlob(blob, filename);\n  } else {\n    const a = document.createElement('a');\n    a.download = filename;\n    a.href = `data:${contentType},${encodeURIComponent(JSON.stringify(objectData))}`;\n    a.target = '_blank';\n    document.body.appendChild(a);\n    a.click();\n    document.body.removeChild(a);\n  }\n};\n\nexport const exportToCSV = (objectData) => {\n  console.log('objectData', objectData);\n  const fields = ['Indicator.title', 'Region.reg_alias_human_name', 'year', 'value', 'measurement_unit'];\n  const opts = { fields };\n  try {\n    const parser = new Parser(opts);\n    const csv = parser.parse(objectData);\n    console.log(csv);\n    const filename = 'export.csv';\n    const contentType = 'application/json;charset=utf-8;';\n    if (window.navigator && window.navigator.msSaveOrOpenBlob) {\n      const blob = new Blob([decodeURIComponent(encodeURI(csv))], { type: contentType });\n      navigator.msSaveOrOpenBlob(blob, filename);\n    } else {\n      const a = document.createElement('a');\n      a.download = filename;\n      a.href = `data:${contentType},${encodeURIComponent(csv)}`;\n      a.target = '_blank';\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n    }\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nexport const exportToXLSX = (objectData) => {\n  console.log('objectData', objectData);\n  const flattenData = objectData.map((stat) => ({\n    Индикатор: stat.Indicator.title, Регион: stat.Region.reg_alias_human_name, Год: stat.year, Значение: stat.value, 'Единицы измерения': stat.measurement_unit,\n  }));\n  try {\n    const filename = 'export';\n    const excel = json2excel({\n      data: flattenData,\n      name: filename,\n      formateDate: 'yyyy/mm/dd',\n    });\n    console.log(excel);\n  } catch (err) {\n    console.error(err);\n  }\n};\n\nexport const addOrdinalToNumber = (labelValue) => {\n  // Nine Zeroes for Billions\n  return Math.abs(Number(labelValue)) >= 1.0e+9\n\n    ? `${(Math.abs(Number(labelValue)) / 1.0e+9).toFixed(2)} млн.`\n  // Six Zeroes for Millions\n    : Math.abs(Number(labelValue)) >= 1.0e+6\n\n      ? `${(Math.abs(Number(labelValue)) / 1.0e+6).toFixed(2)} млрд.`\n    // Three Zeroes for Thousands\n      : Math.abs(Number(labelValue)) >= 1.0e+3\n\n        ? `${(Math.abs(Number(labelValue)) / 1.0e+3).toFixed(2)} трлн.`\n\n        : Math.abs(Number(labelValue).toFixed(2));\n};\n","import React from 'react';\nimport CloseIcon from '@material-ui/icons/Close';\nimport {\n  IconButton,\n  Divider,\n} from '@material-ui/core';\n\nimport { addOrdinalToNumber } from '../constants/helpers';\n\n\nconst IndicatorModal = ({ selectedRegion, currentIndicator, onClose }) => {\n  const beautifulValue = addOrdinalToNumber(`${(selectedRegion && selectedRegion.value) || ''}`.replace(',', '.'));\n  return (\n    <div style={{ fontFamily: 'Roboto, Helvetica, Arial, sans-serif' }}>\n      <div\n        style={{\n          fontSize: '19px',\n          lineHeight: '24px',\n          fontStyle: 'normal',\n          fontWeight: 600,\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n        }}\n      >\n        <span>{(selectedRegion && selectedRegion.Region && selectedRegion.Region.reg_alias_human_name) || ''}</span>\n        {onClose && (\n        <IconButton\n          component=\"span\"\n          size=\"small\"\n          onClick={() => {\n            if (onClose) {\n              onClose();\n            }\n          }}\n        >\n          <CloseIcon />\n        </IconButton>\n        )}\n      </div>\n      <div style={{\n        padding: '8px 0',\n      }}\n      >\n        {(currentIndicator && currentIndicator.title) || ''}\n      </div>\n      <div style={{ display: 'flex', justifyContent: 'space-between' }}>\n        <div style={{\n          padding: '16px',\n          fontSize: '17px',\n          lineHeight: '28px',\n          fontStyle: 'normal',\n          fontWeight: 400,\n          width: '50%',\n          textAlign: 'center',\n        }}\n        >\n          {`За ${(selectedRegion && selectedRegion.year) || ''} год`}\n        </div>\n        <Divider style={{ height: 'auto' }} orientation=\"vertical\" />\n        <div\n          style={{\n            padding: '16px',\n            fontSize: '17px',\n            lineHeight: '28px',\n            fontStyle: 'normal',\n            fontWeight: 400,\n            width: '50%',\n            textAlign: 'center',\n          }}\n        >\n          {`${beautifulValue !== 'NaN' ? beautifulValue : 'Данных нет'}${(selectedRegion && selectedRegion.measurement_unit) || ''}`}\n        </div>\n      </div>\n      {/* <Typography>\n              {currentIndicator.description}\n            </Typography> */}\n    </div>\n  );\n};\n\nexport default IndicatorModal;\n","import React, {\n  useState, useRef, memo,\n} from 'react';\nimport {\n  ZoomableGroup,\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n  Annotation,\n  // Sphere,\n  // Graticule,\n} from 'react-simple-maps';\nimport { geoConicEqualArea, geoCentroid } from 'd3-geo';\nimport {\n  scaleLinear, scaleQuantile, scaleQuantize,\n} from 'd3-scale';\n\nimport {\n  Popover,\n  ButtonGroup,\n  Button,\n} from '@material-ui/core';\nimport IndicatorModal from './IndicatorModal';\nimport { addOrdinalToNumber } from '../constants/helpers';\n\n\nconst mapPath = 'russiaCompressed.json';\n\nconst Map = (props) => {\n  const {\n    statistic,\n    handleTooltipChange,\n    currentIndicator,\n    regions,\n    selectedYear,\n    isLegendIntervaled,\n    colors,\n    colorsCount,\n    isRegionsSigned,\n    mainMapColor,\n    mapFontColor,\n    mapBorderColor,\n    mapFontSize,\n    legendFontSize,\n    isRegionNames3Letters,\n    legendFontColor,\n  } = props;\n  console.log('isRegionsSigned', isRegionsSigned);\n\n  const [selectedRegion, setSelectedRegion] = React.useState(null);\n\n  const [position, setPosition] = useState({ coordinates: [98.11524315889842, 68.0729404428195], zoom: 1 });\n\n  const anchorEl = useRef();\n\n  const onCloseRegionPopover = (event) => {\n    const active = document.querySelector('svg .active');\n    if (active) {\n      active.classList.remove('active');\n    }\n    setSelectedRegion(null);\n  };\n\n  function handleZoomIn() {\n    if (position.zoom >= 4) return;\n    setPosition(pos => ({ ...pos, zoom: pos.zoom * 2 }));\n  }\n\n  function handleZoomOut() {\n    if (position.zoom <= 1) return;\n    setPosition(pos => ({ ...pos, zoom: pos.zoom / 2 }));\n  }\n\n  function handleMoveEnd(position) {\n    setPosition(position);\n  }\n\n  const handleClick = (statistic, geo) => (event) => {\n    const active = document.querySelector('svg .active');\n    if (active) {\n      active.classList.remove('active');\n    }\n    event.target.classList.add('active');\n    setSelectedRegion(statistic);\n  };\n\n  const projection = () => {\n    return geoConicEqualArea()\n      .scale(650)\n      .center([0, 90])\n      .parallels([40, 80])\n      .rotate([265])\n      .translate([430, 0]);\n  };\n\n  const quantize = statistic && scaleQuantize()\n    .domain([statistic.min, statistic.max])\n    .range(colors);\n\n  const colorScale = (value) => {\n    if (isLegendIntervaled) {\n      return statistic ? quantize(value) : mainMapColor;\n    }\n    return statistic ? (scaleLinear()\n      .domain([statistic.min, statistic.max])\n      .range(colors))(value) : mainMapColor;\n  };\n\n  const legendItemsCount = 5;\n\n  const step = statistic && statistic.max\n    ? (statistic.max - statistic.min) / (legendItemsCount - 1) : 0;\n  const legendItems = statistic && statistic.max\n    ? Array.from(Array(legendItemsCount).keys(), item => (statistic.min + item * step).toFixed(2))\n    : [];\n\n  return (\n    <div\n      style={{ paddingTop: '15px', paddingBottom: '15px', position: 'relative' }}\n      ref={anchorEl}\n    >\n      <div\n        style={{\n          background: 'white',\n          position: 'absolute',\n          right: 0,\n        }}\n      >\n        <div\n          style={{\n            display: 'flex',\n            flexDirection: 'column',\n            alignItems: 'flex-start',\n          }}\n        >\n          <span style={\n            {\n              fontSize: `${legendFontSize}px`,\n              lineHeight: '20px',\n              fontStyle: 'normal',\n              fontWeight: 400,\n              color: legendFontColor,\n            }\n          }\n          >\n            {'Диапазоны значений'}\n          </span>\n        </div>\n        <ul style={{ listStyle: 'none' }}>\n          <li style={{ display: 'flex', alignItems: 'flex-start', margin: '8px' }}>\n            <div style={{\n              background: mainMapColor,\n              width: '18px',\n              height: '18px',\n              marginRight: '8px',\n              marginTop: '6px',\n              borderRadius: '2px',\n            }}\n            />\n            <span style={\n              {\n                fontSize: `${legendFontSize}px`,\n                lineHeight: '28px',\n                fontStyle: 'normal',\n                fontWeight: 400,\n                color: legendFontColor,\n              }\n            }\n            >\n              {'Нет данных'}\n            </span>\n          </li>\n          {(isLegendIntervaled ? colors : legendItems).map((item, index) => (\n            <li key={index} style={{ display: 'flex', alignItems: 'flex-start', margin: '8px' }}>\n              <div style={{\n                background: isLegendIntervaled\n                  ? item : colorScale(item),\n                width: '18px',\n                height: '18px',\n                marginRight: '8px',\n                marginTop: '6px',\n                borderRadius: '2px',\n              }}\n              />\n              <div style={{ display: 'flex', flexDirection: 'column' }}>\n                <span style={\n                {\n                  fontSize: `${legendFontSize}px`,\n                  lineHeight: '28px',\n                  fontStyle: 'normal',\n                  fontWeight: 400,\n                  color: legendFontColor,\n                }\n              }\n                >\n                  {`${\n                    (isLegendIntervaled\n                      ? (\n                        `${addOrdinalToNumber((quantize && quantize.invertExtent(item)[0])\n                          || 0)}\n                          -\n                          ${addOrdinalToNumber((quantize && quantize.invertExtent(item)[1])\n                          || 0)}`\n                      )\n                      : addOrdinalToNumber(item || 0))}`}\n                </span>\n                <span\n                  style={{\n                    fontSize: '11px',\n                    lineHeight: '16px',\n                    fontStyle: 'normal',\n                    fontWeight: 400,\n                    color: '#909ebb',\n                  }}\n                >\n                  {`${((statistic && statistic.values && statistic.values[1] && statistic.values[1].measurement_unit) || '')}`}\n                </span>\n              </div>\n            </li>\n          ))}\n        </ul>\n      </div>\n      <ComposableMap\n        projection={projection()}\n        width={900}\n        height={450}\n        style={{\n          width: '100%',\n          height: 'auto',\n        }}\n      >\n        <ZoomableGroup\n          minZoom={1}\n          maxZoom={4}\n          zoom={position.zoom}\n          center={position.coordinates}\n          onMoveEnd={handleMoveEnd}\n        >\n          {/* <Sphere stroke=\"#E4E5E6\" strokeWidth={0.5} /> */}\n          {/* <Graticule stroke=\"#E4E5E6\" strokeWidth={0.5} /> */}\n          <Geographies\n            geography={mapPath}\n            data-tip=\"\"\n            data-for=\"global\"\n          >\n            {({ geographies }) => (\n              <>\n                {geographies.map((geo) => {\n                  const color = statistic\n                && Object.keys(statistic.values || {}).length > 0\n                && statistic.values[geo.properties.id]\n                    ? colorScale(statistic.values[geo.properties.id].value) : mainMapColor;\n                  return (\n                    <Geography\n                      key={geo.rsmKey}\n                      onMouseEnter={() => {\n                        if (statistic && statistic.values && statistic.values[geo.properties.id]) {\n                          handleTooltipChange(statistic.values[geo.properties.id]\n                            || { Region: regions[geo.properties.id], year: selectedYear });\n                        }\n                      }}\n                      onMouseLeave={() => {\n                        handleTooltipChange(null);\n                      }}\n                      className=\"region\"\n                      geography={geo}\n                      style={{\n                        default: {\n                          fill: color,\n                          outline: 'none',\n                          stroke: mapBorderColor,\n                          strokeWidth: '0.5',\n                        },\n                        pressed: {\n                          fill: color,\n                          outline: 'none',\n                          stroke: mapBorderColor,\n                          strokeWidth: '0.5',\n                        },\n                        hover: {\n                          fill: color,\n                          outline: 'none',\n                          stroke: mapBorderColor,\n                          strokeWidth: '0.5',\n                        },\n                      }}\n                      onClick={\n                      handleClick((statistic && statistic.values\n                        && statistic.values[geo.properties.id]) || null, geo)\n                    }\n                    />\n                  );\n                })}\n                {isRegionsSigned && geographies.map((geo) => {\n                  const centroid = geoCentroid(geo);\n                  const cur = regions[geo.properties.id];\n                  return (\n                    <Marker\n                      key={`${geo.rsmKey}-name`}\n                      coordinates={centroid}\n                      onMouseEnter={() => {\n                        if (statistic && statistic.values && statistic.values[geo.properties.id]) {\n                          handleTooltipChange(statistic.values[geo.properties.id]\n                            || { Region: regions[geo.properties.id], year: selectedYear });\n                        }\n                      }}\n                      onMouseLeave={() => {\n                        handleTooltipChange(null);\n                      }}\n                    >\n                      <text x={isRegionNames3Letters ? -12 : -8} fontSize={mapFontSize} alignmentBaseline=\"middle\" fill={mapFontColor}>\n                        {isRegionNames3Letters ? cur.reg_alias_short_3letters : cur.reg_alias_short_2letters}\n                      </text>\n                    </Marker>\n                  //                 <Annotation\n                  //                   subject={centroid}\n                  //                   key={geo.properties.id}\n                  //                       // dx={offsets[cur.id][0]}\n                  // // dy={offsets[cur.id][1]}\n                  //                 >\n                  //                   <text x={4} fontSize={8} alignmentBaseline=\"middle\">\n                  //                     {cur.reg_alias_short_3letters}\n                  //                   </text>\n                  //                 </Annotation>\n                  );\n                })}\n              </>\n            )}\n          </Geographies>\n        </ZoomableGroup>\n      </ComposableMap>\n      <div style={{\n        display: 'flex',\n        position: 'absolute',\n        top: 0,\n        left: '50%',\n        transform: 'translateX(-50%)',\n      }}\n      >\n        <ButtonGroup variant=\"contained\">\n          <Button onClick={handleZoomIn}>+</Button>\n          <Button onClick={handleZoomOut}>-</Button>\n        </ButtonGroup>\n      </div>\n      <Popover\n        anchorEl={anchorEl.current}\n        open={Boolean(selectedRegion)}\n        anchorOrigin={{\n          vertical: 'top',\n          horizontal: 'left',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'left',\n        }}\n        onClose={onCloseRegionPopover}\n      >\n        <div style={{ padding: '18px 24px' }}>\n          <IndicatorModal\n            selectedRegion={selectedRegion}\n            currentIndicator={currentIndicator}\n            onClose={onCloseRegionPopover}\n          />\n        </div>\n      </Popover>\n    </div>\n  );\n};\nfunction areEqual(prevProps, nextProps) {\n  if (\n    prevProps.isTooltipOpen !== nextProps.isTooltipOpen\n    || prevProps.statistic !== nextProps.statistic\n    || prevProps.isLegendIntervaled !== nextProps.isLegendIntervaled\n    || prevProps.colors !== nextProps.colors\n    || prevProps.isRegionsSigned !== nextProps.isRegionsSigned\n    || prevProps.mainMapColor !== nextProps.mainMapColor\n    || prevProps.mapFontColor !== nextProps.mapFontColor\n    || prevProps.mapBorderColor !== nextProps.mapBorderColor\n    || prevProps.mapFontSize !== nextProps.mapFontSize\n    || prevProps.legendFontSize !== nextProps.legendFontSize\n    || prevProps.isRegionNames3Letters !== nextProps.isRegionNames3Letters\n    || prevProps.legendFontColor !== nextProps.legendFontColor\n  ) return false;\n  return true;\n}\nexport default memo(Map, areEqual);\n","import React from 'react';\nimport CloseIcon from '@material-ui/icons/Close';\nimport {\n  IconButton,\n  Divider,\n} from '@material-ui/core';\nimport { addOrdinalToNumber } from '../constants/helpers';\n\nconst IndicatorsModal = ({\n  indicatorsStatistic, selectedIndicators, selectedRegion, selectedYear, onClose,\n}) => {\n  const beautifulValues = selectedIndicators ? selectedIndicators.map((indicator) => {\n    return {\n      Indicator: indicator,\n      value: addOrdinalToNumber(`${(indicatorsStatistic\n        && selectedRegion\n        && indicatorsStatistic[indicator.id]\n        && indicatorsStatistic[indicator.id].values\n        && indicatorsStatistic[indicator.id].values[selectedRegion.reg_alias_fias_id]\n        && indicatorsStatistic[indicator.id].values[selectedRegion.reg_alias_fias_id].value) || ''}`\n        .replace(',', '.')),\n      measurement_unit: indicatorsStatistic\n      && selectedRegion\n      && indicatorsStatistic[indicator.id]\n      && indicatorsStatistic[indicator.id].values\n      && indicatorsStatistic[indicator.id].values[selectedRegion.reg_alias_fias_id]\n      && indicatorsStatistic[indicator.id].values[selectedRegion.reg_alias_fias_id].measurement_unit,\n    };\n  }) : [];\n\n  const stat = selectedIndicators\n  && selectedIndicators.length > 0\n  && indicatorsStatistic\n  && selectedRegion\n  && indicatorsStatistic[selectedIndicators[0].id]\n  && indicatorsStatistic[selectedIndicators[0].id].values\n  && indicatorsStatistic[selectedIndicators[0].id].values[selectedRegion.reg_alias_fias_id];\n\n\n  return (\n    <div style={{ fontFamily: 'Roboto, Helvetica, Arial, sans-serif' }}>\n      <div\n        style={{\n          fontSize: '19px',\n          lineHeight: '24px',\n          fontStyle: 'normal',\n          fontWeight: 600,\n          display: 'flex',\n          justifyContent: 'space-between',\n          alignItems: 'center',\n        }}\n      >\n        <span>{(selectedRegion && selectedRegion.reg_alias_human_name) || ''}</span>\n        {onClose && (\n        <IconButton\n          component=\"span\"\n          size=\"small\"\n          onClick={() => {\n            if (onClose) {\n              onClose();\n            }\n          }}\n        >\n          <CloseIcon />\n        </IconButton>\n        )}\n      </div>\n      {\n        beautifulValues && beautifulValues.length > 0\n        && (\n        <div style={{\n          padding: '8px 0',\n        }}\n        >\n          {`За ${(selectedYear) || ''} год`}\n        </div>\n        )\n      }\n      <>\n        {\n        beautifulValues.map((val) => (\n          <>\n            <Divider style={{ width: 'auto' }} />\n            <div key={val.Indicator.id} style={{ display: 'flex', justifyContent: 'space-between' }}>\n              <div style={{\n                padding: '16px',\n                fontSize: '17px',\n                lineHeight: '28px',\n                fontStyle: 'normal',\n                fontWeight: 400,\n                width: '50%',\n                textAlign: 'center',\n              }}\n              >\n                {`${(val.Indicator && val.Indicator.title) || ''}`}\n              </div>\n              <Divider style={{ height: 'auto' }} orientation=\"vertical\" />\n              <div\n                style={{\n                  padding: '16px',\n                  fontSize: '17px',\n                  lineHeight: '28px',\n                  fontStyle: 'normal',\n                  fontWeight: 400,\n                  width: '50%',\n                  textAlign: 'center',\n                  justifyContent: 'center',\n                  display: 'flex',\n                }}\n              >\n                {`${val.value !== 'NaN' ? val.value : 'Данных нет'}${(val && val.measurement_unit) || ''}`}\n              </div>\n            </div>\n          </>\n        ))\n      }\n      </>\n      {/* <Typography>\n        {selectedIndicators.description}\n      </Typography> */}\n    </div>\n  );\n};\n\nexport default IndicatorsModal;\n","import React, {\n  useState, useRef, memo,\n} from 'react';\nimport {\n  ZoomableGroup,\n  ComposableMap,\n  Geographies,\n  Geography,\n  Marker,\n  Annotation,\n  Sphere,\n  Graticule,\n} from 'react-simple-maps';\nimport { geoConicEqualArea, geoCentroid } from 'd3-geo';\nimport { scaleLinear, scaleQuantile, scaleQuantize } from 'd3-scale';\nimport {\n  Popover,\n  ButtonGroup,\n  Button,\n} from '@material-ui/core';\nimport IndicatorsModal from './IndicatorsModal';\n\nconst mapPath = 'russiaCompressed.json';\n\nconst Map = (props) => {\n  const {\n    statistic,\n    handleTooltipChange,\n    selectedIndicators,\n    regions,\n    selectedYear,\n    indicatorsColors,\n    mainMapColor,\n    mapBorderColor,\n    legendFontSize,\n    legendFontColor,\n  } = props;\n\n  const [selectedRegion, setSelectedRegion] = useState(null);\n\n  const [position, setPosition] = useState({ coordinates: [98.11524315889842, 68.0729404428195], zoom: 1 });\n\n  const anchorEl = useRef();\n\n  const onCloseRegionPopover = (event) => {\n    const active = document.querySelector('svg .active');\n    if (active) {\n      active.classList.remove('active');\n    }\n    setSelectedRegion(null);\n  };\n\n\n  function handleZoomIn() {\n    if (position.zoom >= 4) return;\n    setPosition(pos => ({ ...pos, zoom: pos.zoom * 2 }));\n  }\n\n  function handleZoomOut() {\n    if (position.zoom <= 1) return;\n    setPosition(pos => ({ ...pos, zoom: pos.zoom / 2 }));\n  }\n\n  function handleMoveEnd(position) {\n    setPosition(position);\n  }\n\n\n  const handleClick = (geo) => (event) => {\n    const active = document.querySelector('svg .active');\n    if (active) {\n      active.classList.remove('active');\n    }\n    event.target.classList.add('active');\n    setSelectedRegion(regions[geo.properties.id]);\n  };\n\n  const projection = () => {\n    return geoConicEqualArea()\n      .scale(650)\n      .parallels([40, 80])\n      .center([0, 90])\n      .rotate([265])\n      .translate([430, 0]);\n  };\n\n  // const colorScale = (value) => {\n  //   return statistic ? (scaleLinear()\n  //     .domain([statistic.min, statistic.max])\n  //     .range(['#ffedea', '#ff5233']))(value) : '#F5F4F6';\n  // };\n\n  const barScale = (value, { min, max }) => {\n    return statistic ? (scaleLinear()\n      .domain([min, max])\n      .range([0, 40]))(value) : 0;\n  };\n\n  const statisticIndicators = Object.keys(statistic);\n  const indicatorsCount = statisticIndicators.length;\n  const barWidth = 4;\n  const barOffset = 2;\n\n  return (\n    <div\n      style={{ paddingTop: '15px', paddingBottom: '15px', position: 'relative' }}\n      ref={anchorEl}\n    >\n      <div\n        style={{\n          background: 'white',\n          position: 'absolute',\n          right: 0,\n        }}\n      >\n        <span style={\n          {\n            fontSize: `${legendFontSize}px`,\n            lineHeight: '20px',\n            fontStyle: 'normal',\n            fontWeight: 400,\n            color: legendFontColor,\n          }\n        }\n        >\n          {'Индикаторы'}\n        </span>\n        <ul style={{ listStyle: 'none' }}>\n          {statisticIndicators.map((item, index) => {\n            console.log('statisticIndicatorsItem', item);\n            console.log('statisticIndicatorsItem', indicatorsColors[item]);\n            return (\n              <li key={index} style={{ display: 'flex', alignItems: 'flex-start', margin: '8px' }}>\n                <div style={{\n                  background: indicatorsColors[item], width: '18px', height: '18px', marginRight: '8px', marginTop: '6px', borderRadius: '2px',\n                }}\n                />\n                <span style={\n                {\n                  fontSize: `${legendFontSize}px`,\n                  lineHeight: '28px',\n                  fontStyle: 'normal',\n                  fontWeight: 400,\n                  color: legendFontColor,\n                }\n              }\n                >\n                  {`${{ ...selectedIndicators.find((el) => parseInt(el.id) === parseInt(item)) || {} }.title || ''}`}\n                </span>\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n      <ComposableMap\n        projection={projection()}\n        width={900}\n        height={450}\n        style={{\n          width: '100%',\n          height: 'auto',\n        }}\n      >\n        <ZoomableGroup\n          minZoom={1}\n          maxZoom={4}\n          zoom={position.zoom}\n          center={position.coordinates}\n          onMoveEnd={handleMoveEnd}\n        >\n          <Sphere stroke=\"#E4E5E6\" strokeWidth={0.5} />\n          <Graticule stroke=\"#E4E5E6\" strokeWidth={0.5} />\n          <Geographies\n            geography={mapPath}\n            data-tip=\"\"\n            data-for=\"global\"\n          >\n            {({ geographies }) => (\n              <>\n                {geographies.map((geo, i) => {\n                  return (\n                    <Geography\n                      key={geo.rsmKey}\n                      onMouseEnter={() => {\n                        handleTooltipChange({\n                          selectedRegion: selectedRegion || regions[geo.properties.id],\n                          indicatorsStatistic: statistic,\n                          selectedIndicators,\n                          selectedYear,\n                        });\n                      }}\n                      onMouseLeave={() => {\n                        handleTooltipChange(null);\n                      }}\n                      className=\"region\"\n                      geography={geo}\n                      style={{\n                        default: {\n                          fill: mainMapColor,\n                          outline: 'none',\n                          stroke: mapBorderColor,\n                          strokeWidth: '0.5',\n                        },\n                        pressed: {\n                          fill: mainMapColor,\n                          outline: 'none',\n                          stroke: mapBorderColor,\n                          strokeWidth: '0.5',\n                        },\n                        hover: {\n                          fill: mainMapColor,\n                          outline: 'none',\n                          stroke: mapBorderColor,\n                          strokeWidth: '0.5',\n                        },\n                      }}\n                      onClick={\n                        handleClick(geo)\n                      }\n                    />\n                  );\n                })}\n                { selectedIndicators && selectedIndicators.length > 0 && geographies.map(geo => {\n                  const centroid = geoCentroid(geo);\n                  const cur = regions[geo.properties.id];\n                  return (\n                    <g key={`${geo.rsmKey}-name`}>\n                      {cur\n                      && centroid[0] > 30\n                      && centroid[0] < 200\n                      && statisticIndicators\n                      && (statisticIndicators.map((indicator, i) => {\n                        const height = indicatorsCount > 0\n                          && statistic[indicator].values[geo.properties.id]\n                          ? barScale(statistic[indicator].values[geo.properties.id].value, statistic[indicator]) : 0;\n                        const xPosition = -(indicatorsCount * (barWidth + barOffset)) + (i + 1) * (barWidth + barOffset);\n                        return (\n                          <Marker\n                            key={`${geo.rsmKey}-bar-${indicator}`}\n                            coordinates={centroid}\n                            onMouseEnter={() => {\n                              handleTooltipChange({\n                                selectedRegion: selectedRegion || regions[geo.properties.id],\n                                indicatorsStatistic: statistic,\n                                selectedIndicators,\n                                selectedYear,\n                              });\n                            }}\n                            onMouseLeave={() => {\n                              handleTooltipChange(null);\n                            }}\n                          >\n                            <rect\n                              x={xPosition}\n                              y={-height}\n                              width={barWidth}\n                              height={height}\n                              fill={indicatorsColors[indicator] || '#FFF'}\n                            />\n                          </Marker>\n                        );\n                        // <Annotation\n                        //   subject={centroid}\n                        //   // dx={offsets[cur.id][0]}\n                        //   // dy={offsets[cur.id][1]}\n                        // >\n                        //   <text x={4} fontSize={8} alignmentBaseline=\"middle\">\n                        //     {cur.reg_alias_short_3letters}\n                        //   </text>\n                        // </Annotation>\n                      }))}\n                    </g>\n                  );\n                })}\n              </>\n            )}\n          </Geographies>\n        </ZoomableGroup>\n      </ComposableMap>\n      <div style={{\n        display: 'flex',\n        position: 'absolute',\n        top: 0,\n        left: '50%',\n        transform: 'translateX(-50%)',\n      }}\n      >\n        <ButtonGroup variant=\"contained\">\n          <Button onClick={handleZoomIn}>+</Button>\n          <Button onClick={handleZoomOut}>-</Button>\n        </ButtonGroup>\n      </div>\n      <Popover\n        anchorEl={anchorEl.current}\n        open={Boolean(selectedRegion)}\n        anchorOrigin={{\n          vertical: 'top',\n          horizontal: 'left',\n        }}\n        transformOrigin={{\n          vertical: 'top',\n          horizontal: 'left',\n        }}\n        onClose={onCloseRegionPopover}\n      >\n        <div style={{ padding: '18px 24px' }}>\n          <IndicatorsModal\n            selectedRegion={selectedRegion}\n            indicatorsStatistic={statistic}\n            selectedIndicators={selectedIndicators}\n            selectedYear={selectedYear}\n            onClose={onCloseRegionPopover}\n          />\n        </div>\n      </Popover>\n    </div>\n  );\n};\nfunction areEqual(prevProps, nextProps) {\n  if (\n    prevProps.isTooltipOpen !== nextProps.isTooltipOpen\n    || prevProps.statistic !== nextProps.statistic\n    || prevProps.isRegionsSigned !== nextProps.isRegionsSigned\n    || prevProps.mainMapColor !== nextProps.mainMapColor\n    || prevProps.mapFontColor !== nextProps.mapFontColor\n    || prevProps.mapBorderColor !== nextProps.mapBorderColor\n    || prevProps.mapFontSize !== nextProps.mapFontSize\n    || prevProps.legendFontSize !== nextProps.legendFontSize\n    || prevProps.isRegionNames3Letters !== nextProps.isRegionNames3Letters\n    || prevProps.indicatorsColors !== nextProps.indicatorsColors\n    || prevProps.legendFontColor !== nextProps.legendFontColor\n  ) return false;\n  return true;\n}\nexport default memo(Map, areEqual);\n","import React from 'react';\n\nconst StatisticHeader = ({ currentIndicator, selectedYears }) => {\n  return (\n    <div style={{ paddingTop: '16px' }}>\n      <div\n        style={{\n          fontSize: '24px',\n          lineHeight: '32px',\n          fontWeight: 400,\n        }}\n      >\n        {(currentIndicator && currentIndicator.title) || ''}\n      </div>\n      {selectedYears && selectedYears.length > 0 && (\n        <div\n          style={{\n            fontSize: '24px',\n            lineHeight: '32px',\n            fontWeight: 400,\n          }}\n        >\n          {`${Math.min(...selectedYears)}-${Math.max(...selectedYears)}`}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default StatisticHeader;\n","\nimport React from 'react';\nimport { ChromePicker } from 'react-color';\nimport {\n  Button,\n} from '@material-ui/core';\n\nclass ColorPickerButton extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      displayColorPicker: false,\n      color: props.color,\n    };\n  }\n\n  handleClick = () => {\n    this.setState({ displayColorPicker: !this.state.displayColorPicker });\n  };\n\n  handleClose = () => {\n    this.setState({ displayColorPicker: false });\n  };\n\n  handleChange = (color) => {\n    this.setState({ color: color.hex });\n  };\n\n  handleChangeComplete= (color) => {\n    this.props.handleColorChange(color.hex);\n  }\n\n  render() {\n    const popover = {\n      position: 'absolute',\n      zIndex: '2',\n    };\n    const cover = {\n      position: 'fixed',\n      top: '0px',\n      right: '0px',\n      bottom: '0px',\n      left: '0px',\n    };\n    return (\n      <div>\n        <Button\n          style={{\n            width: '24px',\n            height: '24px',\n            background: this.state.color,\n            margin: '4px',\n            padding: '0',\n            minWidth: '0',\n          }}\n          variant=\"outlined\"\n          onClick={this.handleClick}\n        >\n          {''}\n        </Button>\n        { this.state.displayColorPicker ? (\n          <div style={popover}>\n            <div style={cover} onClick={this.handleClose} />\n            <ChromePicker\n              color={this.state.color}\n              onChangeComplete={this.handleChangeComplete}\n              onChange={this.handleChange}\n            />\n          </div>\n        ) : null }\n      </div>\n    );\n  }\n}\n\nexport default ColorPickerButton;\n","import React from 'react';\n\nimport {\n  Typography,\n  Box,\n} from '@material-ui/core';\n\nconst TabPanel = (props) => {\n  const {\n    children, value, index, ...other\n  } = props;\n\n  return (\n    <Typography\n      component=\"div\"\n      role=\"tabpanel\"\n      hidden={value !== index}\n      id={`tabpanel-${index}`}\n      aria-labelledby={`tab-${index}`}\n      {...other}\n    >\n      {value === index && <Box p={3}>{children}</Box>}\n    </Typography>\n  );\n};\n\nexport default TabPanel;\n","import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport {\n  Divider,\n  InputLabel,\n  FormControl,\n  Select,\n  Chip,\n  TextField,\n  Checkbox,\n} from '@material-ui/core';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport ReactTooltip from 'react-tooltip';\nimport MapAnimation from '../components/MapAnimation';\nimport Map from '../components/Map';\nimport MapWithBars from '../components/MapWithBars';\nimport IndicatorModal from '../components/IndicatorModal';\nimport IndicatorsModal from '../components/IndicatorsModal';\nimport StatisticHeader from '../components/StatisticHeader';\nimport { getStatisticByIndicator, getStatisticForMap } from '../actions/statisticAction';\n\nimport { withSettingsPanel } from './withSettingsPanel';\n\nfunction timeout(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n\nconst MapTab = ({\n  currentIndicator,\n  getStatisticForMap,\n  mapStatistic,\n  mapRegions,\n  years,\n  indicators,\n  isBar,\n  colors,\n  colorsCount,\n  isLegendIntervaled,\n  isRegionsSigned,\n  handleSelectedIndicatorsChange,\n  mainMapColor,\n  mapFontColor,\n  mapBorderColor,\n  mapFontSize,\n  legendFontSize,\n  legendFontColor,\n  isRegionNames3Letters,\n  indicatorsColors,\n}) => {\n  console.log('Render', indicatorsColors);\n  const [selectedIndicators, setSelectedIndicators] = React.useState([]);\n  const [selectedYear, setSelectedYear] = React.useState(0);\n\n  const [tooltip, setTooltip] = useState(null);\n\n  const [isAnimating, setIsAnimating] = useState(false);\n\n  useEffect(() => {\n    if (years && years.length > 0) {\n      setSelectedYear(years[0]);\n    }\n  }, [years]);\n\n  useEffect(() => {\n    if (currentIndicator && currentIndicator.id) {\n      getStatisticForMap([currentIndicator]);\n    }\n  }, [currentIndicator]);\n\n  useEffect(() => {\n    if (selectedIndicators && selectedIndicators.length > 0) {\n      getStatisticForMap(selectedIndicators);\n      handleSelectedIndicatorsChange(selectedIndicators);\n    }\n  }, [selectedIndicators]);\n\n  const ProcessAnimation = async () => {\n    const currentPosition = years.findIndex((year) => year === selectedYear);\n    const newPosition = currentPosition + 1;\n    if (newPosition >= years.length) {\n      setIsAnimating(false);\n      return;\n    }\n    setSelectedYear(years[newPosition]);\n    await timeout(500);\n    if (isAnimating) ProcessAnimation();\n  };\n\n  useEffect(() => {\n    if (isAnimating) {\n      ProcessAnimation();\n    }\n  }, [isAnimating]);\n\n  const handleSelectedIndicators = (event, newValue) => {\n    setSelectedIndicators(newValue);\n    handleSelectedIndicatorsChange(newValue);\n  };\n  const onPlayClick = () => {\n    setIsAnimating(true);\n  };\n\n  const onPauseClick = () => {\n    setIsAnimating(false);\n  };\n\n  const onStopClick = () => {\n    setIsAnimating(false);\n    setSelectedYear(years[0]);\n  };\n\n  const onReplayClick = () => {\n    setSelectedYear(years[0]);\n    setIsAnimating(true);\n  };\n\n  return (\n    <>\n      {/* <Grid container spacing={3}>\n        <Grid item xs={3}>\n          <FormControl fullWidth>\n            <InputLabel shrink id=\"grouped-select-label\">\n              Год\n            </InputLabel>\n            <Select\n              labelId=\"grouped-select-label\"\n              id=\"grouped-select\"\n              value={selectedYear || ''}\n              onChange={handleYearChange}\n            >\n              {years?.map((year) => (\n                <MenuItem key={year} value={year}>{year}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </Grid>\n      </Grid> */}\n      {\n        isBar && (\n          <Autocomplete\n            style={{\n              paddingBottom: '16px',\n            }}\n            options={indicators}\n            multiple\n            onChange={handleSelectedIndicators}\n            value={selectedIndicators}\n            noOptionsText=\"Не найдено\"\n            disableCloseOnSelect\n              // renderTags={() => {}}\n              // renderTags={(value, getTagProps) => (\n              //   <div>\n              //     <span style={{ whiteSpace: 'nowrap' }}>\n              //       {`${value.map((reg) => reg.reg_alias_human_name).join(', ')}`}\n              //     </span>\n              //   </div>\n              // )}\n            renderTags={(value, getTagProps) => (\n              <div className=\"chips\">\n                {value.map((indicator) => (\n                  <Chip key={indicator.id} label={indicator.title} className=\"chips\" />\n                ))}\n              </div>\n            )}\n            getOptionLabel={(option) => option.title}\n            renderInput={(params) => (\n              <TextField\n                {...params}\n                label=\"Индикаторы\"\n                InputLabelProps={{ shrink: true }}\n              />\n            )}\n            renderOption={(option, { selected }) => (\n              <>\n                <Checkbox\n                  style={{ marginRight: 8 }}\n                  checked={selected}\n                />\n                {option.title}\n              </>\n            )}\n            getOptionSelected={(option, value) => value.id === option.id}\n          />\n        )\n      }\n      {!isBar && (<StatisticHeader currentIndicator={currentIndicator} />)}\n      {\n        !isBar ? (\n          <Map\n            statistic={mapStatistic\n              && selectedYear\n              && mapStatistic[selectedYear] && currentIndicator && currentIndicator.id\n              ? mapStatistic[selectedYear][currentIndicator.id] : []}\n            regions={mapRegions}\n            selectedYear={selectedYear}\n            handleTooltipChange={setTooltip}\n            currentIndicator={currentIndicator || {}}\n            isLegendIntervaled={isLegendIntervaled}\n            colors={colors}\n            colorsCount={colorsCount}\n            isRegionsSigned={isRegionsSigned}\n            mainMapColor={mainMapColor}\n            mapFontColor={mapFontColor}\n            mapBorderColor={mapBorderColor}\n            mapFontSize={mapFontSize}\n            legendFontSize={legendFontSize}\n            isRegionNames3Letters={isRegionNames3Letters}\n            legendFontColor={legendFontColor}\n          />\n        ) : (\n          <MapWithBars\n            statistic={mapStatistic && selectedYear && mapStatistic[selectedYear]\n              ? mapStatistic[selectedYear] : []}\n            regions={mapRegions}\n            selectedYear={selectedYear}\n            handleTooltipChange={setTooltip}\n            selectedIndicators={selectedIndicators}\n            indicatorsColors={indicatorsColors}\n            mainMapColor={mainMapColor}\n            mapBorderColor={mapBorderColor}\n            mapFontSize={mapFontSize}\n            legendFontSize={legendFontSize}\n            legendFontColor={legendFontColor}\n          />\n        )\n      }\n\n      <MapAnimation\n        setSelectedYear={setSelectedYear}\n        years={years}\n        year={selectedYear}\n        onPlayClick={onPlayClick}\n        onPauseClick={onPauseClick}\n        onStopClick={onStopClick}\n        onReplayClick={onReplayClick}\n      />\n      <Divider />\n      <ReactTooltip\n        id=\"global\"\n      // effect={isTooltipOpen ? 'solid' : 'float'}\n        effect=\"float\"\n        // globalEventOff=\"click\"\n        // style={{\n        //   pointerEvents: 'auto',\n        // }}\n        clickable\n        // delayUpdate={500}\n        place={'top'}\n        type={'light'}\n        // afterShow={() => {\n        //   setIsTooltipOpen(true);\n        // }}\n        // afterHide={() => setIsTooltipOpen(false)}\n      >\n        {tooltip\n        && !isBar ? (\n          <IndicatorModal selectedRegion={tooltip} currentIndicator={currentIndicator} />\n          )\n          : (<IndicatorsModal {...tooltip} />)}\n      </ReactTooltip>\n    </>\n  );\n};\n\nexport default connect(\n  (state) => {\n    return {\n      mapStatistic: state.statistic.mapStatistic,\n      mapRegions: state.statistic.mapRegions,\n    };\n  },\n  {\n    getStatisticByIndicator,\n    getStatisticForMap,\n  },\n)(withSettingsPanel(MapTab));\n","\nimport React, { createRef } from 'react';\nimport {\n  TextField,\n  Checkbox,\n  Grid,\n  Paper,\n  Button,\n  Tabs,\n  Tab,\n  Popper,\n  IconButton,\n  FormControlLabel,\n} from '@material-ui/core';\nimport SettingsIcon from '@material-ui/icons/Settings';\nimport { randomColor } from '../constants/helpers';\nimport ColorPickerButton from '../components/ColorPickerButton';\nimport TabPanel from '../components/TabPanel';\n\n\nexport function withSettingsPanel(WrappedComponent) {\n  function getTabProps(index) {\n    return {\n      id: `tab-${index}`,\n      'aria-controls': `tabpanel-${index}`,\n      style: { width: '141px', minWidth: '141px' },\n      value: index,\n    };\n  }\n  return class SettingsPanel extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        selectedIndicators: [],\n        currentTab: 'map',\n        colorsCount: 2,\n        // colors: new Array(2).fill('#F5F4F6'),\n        colors: ['#ffedea', '#ff5233'],\n        isRegionsSigned: false,\n        isLegendIntervaled: false,\n        isSettingsOpened: false,\n        legendFontColor: '#000',\n        mainMapColor: '#F5F4F6',\n        mapFontColor: '#000',\n        mapBorderColor: '#FFF',\n        mapFontSize: 8,\n        legendFontSize: 17,\n        isRegionNames2Letters: false,\n        indicatorsColors: [],\n      };\n    }\n\n    settingsButton = createRef();\n\n    handleChange = (e) => {\n      this.setState({ [e.target.name]: e.target.value });\n    };\n\n    handleColorsCountChange = (e) => {\n      e.persist();\n      let newValue = e.target.value;\n      if (!/^\\d+$/.test(`${newValue}`)) return;\n      if (newValue >= 10)newValue = 10;\n      if (newValue <= 0)newValue = 0;\n      this.setState(prevState => {\n        const difference = prevState.colors.length - (newValue || 0);\n        const newColors = difference > 0\n          ? [...prevState.colors.splice(0, newValue)]\n          : [...prevState.colors, ...new Array(Math.abs(difference)).fill(prevState.mainMapColor)];\n        return ({\n          ...prevState,\n          colorsCount: newValue,\n          colors: newColors,\n        });\n      });\n    };\n\n    handleFontSizeChange =(name) => (e) => {\n      e.persist();\n      let newValue = e.target.value;\n      if (!/^\\d+$/.test(`${newValue}`)) return;\n      if (newValue >= 30)newValue = 30;\n      if (newValue <= 0)newValue = 0;\n      this.setState({ [name]: newValue });\n    };\n\n    handleColorsChange =(index) => (color) => {\n      const { colors } = this.state;\n      const newColors = [...colors];\n      newColors[index] = color;\n      this.setState({\n        colors: newColors,\n      });\n    };\n\n    handleColorChange= (name) => (color) => {\n      this.setState({\n        [name]: color,\n      });\n    };\n\n    handleLegendIntervaledChange = (e) => {\n      e.persist();\n      this.setState(prevState => {\n        if (!e.target.checked) {\n          return {\n            ...prevState,\n            colors: [...prevState.colors.splice(0, 2)],\n            colorsCount: 2,\n            isLegendIntervaled: e.target.checked,\n          };\n        }\n        return { isLegendIntervaled: e.target.checked };\n      });\n    };\n\n    handleCheckboxChange = (e) => {\n      this.setState({ [e.target.name]: e.target.checked });\n    };\n\n    handleTabChange = (event, newValue) => {\n      this.setState({ currentTab: newValue });\n    };\n\n    handleSelectedIndicatorsChange = (newValue) => {\n      this.setState(prevState => {\n        const difference = prevState.selectedIndicators.length - (newValue.length || 0);\n        const newColors = difference > 0\n          ? [...prevState.indicatorsColors.splice(0, newValue.length)]\n          : [...prevState.indicatorsColors, ...new Array(Math.abs(difference)).fill(randomColor())];\n        return ({ ...prevState, selectedIndicators: newValue, indicatorsColors: newColors });\n      });\n    };\n\n    handleIndicatorColorsChange =(index) => (color) => {\n      const { indicatorsColors } = this.state;\n      const newColors = [...indicatorsColors];\n      newColors[index] = color;\n      this.setState({\n        indicatorsColors: newColors,\n      });\n    };\n\n    render() {\n      const {\n        colorsCount,\n        colors,\n        isRegionsSigned,\n        isLegendIntervaled,\n        isSettingsOpened,\n        legendFontColor,\n        mapBorderColor,\n        selectedIndicators,\n        currentTab,\n        mainMapColor,\n        mapFontColor,\n        mapFontSize,\n        legendFontSize,\n        isRegionNames2Letters,\n        indicatorsColors,\n      } = this.state;\n      return (\n        <div style={{ position: 'relative' }}>\n          <IconButton\n            onClick={() => {\n              this.setState(prevState => ({ isSettingsOpened: !prevState.isSettingsOpened }));\n            }}\n            ref={this.settingsButton}\n            style={{\n              position: 'absolute',\n              top: '10%',\n              // left: '10%',\n              zIndex: '1',\n            }}\n          >\n            <SettingsIcon />\n          </IconButton>\n          <Popper open={isSettingsOpened} anchorEl={this.settingsButton.current}>\n            <Paper\n              elevation={3}\n              square\n            >\n              <Tabs\n                value={currentTab}\n                onChange={this.handleTabChange}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                // variant=\"fullWidth\"\n              >\n                <Tab label=\"Карта\" {...getTabProps('map')} />\n                <Tab label=\"Легенда\" {...getTabProps('legend')} />\n              </Tabs>\n              <>\n                <TabPanel value={currentTab} index=\"map\">\n                  <Grid container direction=\"column\" spacing={1}>\n                    <Grid\n                      item\n                      style={{\n                        display: 'flex',\n                        flexDirection: 'row',\n                        alignItems: 'center',\n                        justifyContent: 'start',\n                      }}\n                    >\n                      <ColorPickerButton\n                        color={mainMapColor}\n                        handleColorChange={this.handleColorChange('mainMapColor')}\n                      />\n                      <span>\n                        Основной цвет карты\n                      </span>\n                    </Grid>\n                    {!this.props.isBar\n                      ? (\n                        <>\n                          <Grid item>\n                            <FormControlLabel\n                              control={(\n                                <Checkbox\n                                  style={{ marginLeft: '4px' }}\n                                  checked={isLegendIntervaled}\n                                  name=\"isLegendIntervaled\"\n                                  onChange={this.handleLegendIntervaledChange}\n                                />\n                            )}\n                              label=\"Разделить на интервалы\"\n                            />\n                          </Grid>\n                          {isLegendIntervaled && (\n                          <Grid item>\n                            <TextField\n                              fullWidth\n                              label=\"Количество цветов карты\"\n                              inputProps={{ min: 1, max: 10 }}\n                              type=\"number\"\n                              onChange={this.handleColorsCountChange}\n                              InputLabelProps={{\n                                shrink: true,\n                              }}\n                              value={colorsCount}\n                            />\n                          </Grid>\n                          )}\n                          <Grid item style={{ maxWidth: '170px' }}>\n                            <Grid container direction=\"column\">\n                              <Grid item>\n                                <span>Цвета карты</span>\n                              </Grid>\n                              <Grid item>\n                                <div style={{\n                                  display: 'flex', flexFlow: 'wrap', border: '1px solid #D8DEE7', borderRadius: '4px',\n                                }}\n                                >\n                                  {colors.map((color, index) => {\n                                    return (\n                                      <ColorPickerButton\n                                        key={index}\n                                        color={color}\n                                        handleColorChange={this.handleColorsChange(index)}\n                                      />\n                                    );\n                                  })}\n                                </div>\n                              </Grid>\n                            </Grid>\n                          </Grid>\n                        </>\n                      ) : (\n                        <Grid item style={{ maxWidth: '170px' }}>\n                          <Grid container direction=\"column\">\n                            <Grid item>\n                              <span>Цвета индикаторов</span>\n                            </Grid>\n                            <Grid item>\n                              <Grid\n                                container\n                                style={{\n                                  display: 'flex', border: '1px solid #D8DEE7', borderRadius: '4px',\n                                }}\n                              >\n                                {indicatorsColors.map((color, index) => {\n                                  return (\n                                    <Grid\n                                      key={selectedIndicators[index].id}\n                                      item\n                                      style={{\n                                        display: 'flex',\n                                        flexDirection: 'row',\n                                        alignItems: 'center',\n                                        justifyContent: 'start',\n                                      }}\n                                    >\n                                      <ColorPickerButton\n                                        key={index}\n                                        color={color}\n                                        handleColorChange={this.handleIndicatorColorsChange(index)}\n                                      />\n                                      <div>\n                                        <div>\n                                          {selectedIndicators[index].title}\n                                        </div>\n                                      </div>\n                                    </Grid>\n                                  );\n                                })}\n                              </Grid>\n                            </Grid>\n                          </Grid>\n                        </Grid>\n                      )}\n                    <Grid\n                      item\n                      style={{\n                        display: 'flex',\n                        flexDirection: 'row',\n                        alignItems: 'center',\n                        justifyContent: 'start',\n                      }}\n                    >\n                      <ColorPickerButton\n                        color={mapBorderColor}\n                        handleColorChange={this.handleColorChange('mapBorderColor')}\n                      />\n                      <span>\n                        Цвет границ\n                      </span>\n                    </Grid>\n                    {!this.props.isBar\n                    && (\n                      <>\n                        <Grid item>\n                          <FormControlLabel\n                            control={(\n                              <Checkbox\n                                style={{ marginLeft: '4px' }}\n                                checked={isRegionsSigned}\n                                name=\"isRegionsSigned\"\n                                onChange={this.handleCheckboxChange}\n                              />\n                        )}\n                            label=\"Подписать регионы\"\n                          />\n                        </Grid>\n                        {isRegionsSigned\n                    && (\n                      <>\n                        <Grid item>\n                          <FormControlLabel\n                            control={(\n                              <Checkbox\n                                style={{ marginLeft: '4px' }}\n                                checked={isRegionNames2Letters}\n                                name=\"isRegionNames2Letters\"\n                                onChange={this.handleCheckboxChange}\n                              />\n                        )}\n                            label=\"Двухбуквенное сокращение\"\n                          />\n                        </Grid>\n                        <Grid\n                          item\n                          style={{\n                            display: 'flex',\n                            flexDirection: 'row',\n                            alignItems: 'center',\n                            justifyContent: 'start',\n                          }}\n                        >\n                          <ColorPickerButton\n                            color={mapFontColor}\n                            handleColorChange={this.handleColorChange('mapFontColor')}\n                          />\n                          <span>\n                            Цвет текста\n                          </span>\n                        </Grid>\n                        <Grid item>\n                          <TextField\n                            fullWidth\n                            label=\"Размер шрифта\"\n                            inputProps={{ min: 1, max: 30 }}\n                            type=\"number\"\n                            InputLabelProps={{\n                              shrink: true,\n                            }}\n                            value={mapFontSize}\n                            onChange={this.handleFontSizeChange('mapFontSize')}\n                          />\n                        </Grid>\n                      </>\n                    )}\n                      </>\n                    )}\n                  </Grid>\n                </TabPanel>\n                <TabPanel value={currentTab} index=\"legend\">\n                  <Grid container direction=\"column\" spacing={1}>\n                    <Grid item>\n                      <TextField\n                        fullWidth\n                        label=\"Размер шрифта\"\n                        inputProps={{ min: 1, max: 30 }}\n                        type=\"number\"\n                        InputLabelProps={{\n                          shrink: true,\n                        }}\n                        value={legendFontSize}\n                        onChange={this.handleFontSizeChange('legendFontSize')}\n                      />\n                    </Grid>\n                    <Grid\n                      item\n                      style={{\n                        display: 'flex',\n                        flexDirection: 'row',\n                        alignItems: 'center',\n                        justifyContent: 'start',\n                      }}\n                    >\n                      <ColorPickerButton\n                        color={legendFontColor}\n                        handleColorChange={this.handleColorChange('legendFontColor')}\n                      />\n                      <span>\n                        Цвет текста легенды\n                      </span>\n                    </Grid>\n                  </Grid>\n                </TabPanel>\n              </>\n            </Paper>\n          </Popper>\n          {!this.props.isBar ? (\n            <WrappedComponent\n              {...this.props}\n              colors={colors}\n              colorsCount={colorsCount}\n              isLegendIntervaled={isLegendIntervaled}\n              isRegionsSigned={isRegionsSigned}\n              mainMapColor={mainMapColor}\n              mapFontColor={mapFontColor}\n              mapBorderColor={mapBorderColor}\n              mapFontSize={mapFontSize}\n              legendFontSize={legendFontSize}\n              isRegionNames3Letters={!isRegionNames2Letters}\n              legendFontColor={legendFontColor}\n            />\n          ) : (\n            <WrappedComponent\n              {...this.props}\n              colors={colors}\n              selectedIndicators={selectedIndicators}\n              isRegionsSigned={isRegionsSigned}\n              mainMapColor={mainMapColor}\n              mapBorderColor={mapBorderColor}\n              mapFontSize={mapFontSize}\n              legendFontSize={legendFontSize}\n              handleSelectedIndicatorsChange={this.handleSelectedIndicatorsChange}\n              legendFontColor={legendFontColor}\n              indicatorsColors={selectedIndicators.reduce((r, a, index) => {\n                console.log('indicatorsColors', indicatorsColors);\n                r[a.id] = indicatorsColors[index];\n                return r;\n              }, {})}\n            />\n          )}\n        </div>\n      );\n    }\n  };\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  TableBody,\n  TableRow,\n  TableHead,\n  TableCell,\n  Table,\n  TableContainer,\n  Paper,\n} from '@material-ui/core';\n\nconst MainTable = ({\n  data,\n}) => {\n  return (\n    <>\n      {data && data.length > 0 && (\n        <>\n          <TableContainer\n            border={1}\n            component={Paper}\n            style={{ marginTop: '16px' }}\n          >\n            <Table>\n              <TableHead className=\"table-head\">\n                <TableRow>\n                  <TableCell>Название субъекта</TableCell>\n                  <TableCell>Год</TableCell>\n                  <TableCell>Значение</TableCell>\n                  <TableCell>Единицы измерения</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {data.map((statisticRow) => (\n                  <TableRow key={statisticRow.id}>\n                    <TableCell>{statisticRow.Region.reg_alias_human_name}</TableCell>\n                    <TableCell>{statisticRow.year}</TableCell>\n                    <TableCell>{statisticRow.value}</TableCell>\n                    <TableCell>{statisticRow.measurement_unit}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </>\n      )}\n    </>\n  );\n};\n\n\nexport default connect(\n  state => {\n    return {\n    };\n  },\n  {\n  },\n)(MainTable);\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport SaveIcon from '@material-ui/icons/Save';\nimport {\n  Button,\n  ListItemText,\n  Checkbox,\n  Chip,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Select,\n  Input,\n  Grid,\n  Typography,\n  Menu,\n} from '@material-ui/core';\nimport MainTable from './MainTable';\nimport StatisticHeader from '../components/StatisticHeader';\nimport { getStatisticByIndicator } from '../actions/statisticAction';\nimport { exportToJson, exportToCSV, exportToXLSX } from '../constants/helpers';\n\n\nconst TableTab = ({\n  currentIndicator, statistic, years, regions, getStatisticByIndicator,\n}) => {\n  const [selectedYears, setSelectedYears] = React.useState([]);\n  const [selectedRegions, setSelectedRegions] = React.useState([]);\n  const [anchorEl, setAnchorEl] = React.useState(null);\n\n  useEffect(() => {\n    if (selectedRegions.length === 0) {\n      setSelectedRegions(regions);\n    }\n    if (selectedYears.length === 0) {\n      setSelectedYears(years);\n    }\n  }, [statistic]);\n\n  useEffect(() => {\n    if (currentIndicator) {\n      setSelectedRegions([]);\n      setSelectedYears([]);\n      getStatisticByIndicator({ indicator: currentIndicator });\n    }\n  }, [currentIndicator]);\n\n  const handleSelectedYearsChange = (event) => {\n    setSelectedYears(event.target.value);\n    getStatisticByIndicator({ indicator: currentIndicator, regions: selectedRegions, years: event.target.value });\n  };\n\n  const handleSelectedRegions = (event) => {\n    setSelectedRegions(event.target.value);\n    getStatisticByIndicator({ indicator: currentIndicator, years: selectedYears, regions: event.target.value });\n  };\n\n  const handleSaveClick = (event) => {\n    setAnchorEl(event.currentTarget);\n  };\n\n  const handleSaveClose = () => {\n    setAnchorEl(null);\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        alignItems=\"flex-end\"\n        justify=\"space-between\"\n      >\n        <Grid item xs={4}>\n          <FormControl fullWidth>\n            <InputLabel shrink id=\"region-select-label\">\n              Регион\n            </InputLabel>\n            <Select\n              labelId=\"region-select-label\"\n              multiple\n              value={selectedRegions || ''}\n              onChange={handleSelectedRegions}\n              input={<Input />}\n              renderValue={(selected) => selected.map((reg) => reg.reg_alias_human_name).join(', ')}\n              MenuProps={{\n                anchorOrigin: {\n                  vertical: 'bottom',\n                  horizontal: 'left',\n                },\n                transformOrigin: {\n                  vertical: 'top',\n                  horizontal: 'left',\n                },\n                getContentAnchorEl: null,\n              }}\n            >\n              {regions && regions.map((region) => (\n                <MenuItem key={region.reg_ID} value={region}>\n                  <Checkbox checked={selectedRegions.indexOf(region) > -1} />\n                  <ListItemText primary={region.reg_alias_human_name} />\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item xs={7} style={{ paddingRight: '0px' }}>\n          <Grid container alignItems=\"center\" justify=\"flex-end\">\n            <Grid xs={9} item style={{ paddingRight: '10px' }}>\n              <FormControl fullWidth>\n                <InputLabel shrink id=\"years-select-label\">\n                  Годы\n                </InputLabel>\n                <Select\n                  labelId=\"years-select-label\"\n                  multiple\n                  value={selectedYears || ''}\n                  onChange={handleSelectedYearsChange}\n                  input={<Input />}\n                  renderValue={(selected) => (\n                    <div className=\"chips\">\n                      {selected.map((value) => (\n                        <Chip key={value} label={value} className=\"chips\" />\n                      ))}\n                    </div>\n                  )}\n                  MenuProps={{\n                    anchorOrigin: {\n                      vertical: 'bottom',\n                      horizontal: 'left',\n                    },\n                    transformOrigin: {\n                      vertical: 'top',\n                      horizontal: 'left',\n                    },\n                    getContentAnchorEl: null,\n                  }}\n                >\n                  {years && years.map((year) => (\n                    <MenuItem key={year} value={year}>\n                      <Checkbox checked={selectedYears.indexOf(year) > -1} />\n                      <ListItemText primary={year} />\n                    </MenuItem>\n                  ))}\n                </Select>\n              </FormControl>\n            </Grid>\n            <Grid item xs={3}>\n              <Button\n                variant=\"contained\"\n                color=\"primary\"\n                size=\"medium\"\n                startIcon={<SaveIcon />}\n                onClick={handleSaveClick}\n              >\n                Сохранить\n              </Button>\n              <Menu\n                anchorEl={anchorEl}\n                getContentAnchorEl={null}\n                anchorOrigin={{\n                  vertical: 'bottom',\n                  horizontal: 'center',\n                }}\n                transformOrigin={{\n                  vertical: 'top',\n                  horizontal: 'center',\n                }}\n                keepMounted\n                open={Boolean(anchorEl)}\n                onClose={handleSaveClose}\n              >\n                <MenuItem onClick={() => {\n                  exportToJson(statistic);\n                }}\n                >\n                  JSON\n                </MenuItem>\n                <MenuItem onClick={() => {\n                  exportToCSV(statistic);\n                }}\n                >\n                  CSV\n                </MenuItem>\n                <MenuItem onClick={() => {\n                  exportToXLSX(statistic);\n                }}\n                >\n                  XLSX (Excel)\n                </MenuItem>\n              </Menu>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n      <StatisticHeader currentIndicator={currentIndicator} selectedYears={selectedYears} />\n      <MainTable data={statistic} />\n    </>\n  );\n};\n\nexport default connect(\n  (state) => {\n  },\n  {\n    getStatisticByIndicator,\n  },\n)(TableTab);\n","import React from 'react';\nimport {\n  TableBody,\n  TableRow,\n  TableHead,\n  TableCell,\n  Table,\n  TableContainer,\n  Paper,\n} from '@material-ui/core';\n\nconst RegionTable = ({\n  data,\n}) => {\n  return (\n    <>\n      {data && data.length > 0 && (\n        <>\n          <TableContainer\n            border={1}\n            component={Paper}\n            style={{ marginTop: '16px' }}\n          >\n            <Table>\n              <TableHead className=\"table-head\">\n                <TableRow>\n                  <TableCell>Место</TableCell>\n                  <TableCell>Индикатор</TableCell>\n                  <TableCell>Значение</TableCell>\n                  <TableCell>Единицы измерения</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {data.map((statisticRow) => (\n                  <TableRow key={statisticRow.id}>\n                    <TableCell>{`${statisticRow.place}/85`}</TableCell>\n                    <TableCell>{statisticRow.Indicator.title}</TableCell>\n                    <TableCell>{statisticRow.value}</TableCell>\n                    <TableCell>{statisticRow.measurement_unit}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </>\n      )}\n    </>\n  );\n};\n\n\nexport default RegionTable;\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport {\n  ListItemText,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Select,\n  Input,\n  Grid,\n} from '@material-ui/core';\nimport RegionTable from './RegionTable';\nimport { getStatisticForRegionTop } from '../actions/statisticAction';\n\nconst RegionRating = ({\n  years,\n  regions,\n  getStatisticForRegionTop,\n  top,\n}) => {\n  const [selectedYear, setSelectedYear] = React.useState(null);\n  const [selectedRegion, setSelectedRegion] = React.useState(null);\n\n\n  useEffect(() => {\n    if (selectedYear === null && years && years.length > 0) {\n      setSelectedYear(years[0]);\n    }\n  }, [years]);\n\n  useEffect(() => {\n    if (selectedRegion === null && regions && regions.length > 0) {\n      setSelectedRegion(regions[0]);\n    }\n  }, [regions]);\n\n  useEffect(() => {\n    if (selectedRegion !== null && selectedYear !== null) {\n      getStatisticForRegionTop({ year: selectedYear, region: selectedRegion });\n    }\n  }, [selectedYear, selectedRegion]);\n\n  const handleSelectedYearChange = (event) => {\n    setSelectedYear(event.target.value);\n  };\n\n  const handleSelectedRegion = (event) => {\n    setSelectedRegion(event.target.value);\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        alignItems=\"flex-end\"\n        justify=\"space-between\"\n      >\n        <Grid item xs={4}>\n          <FormControl fullWidth>\n            <InputLabel shrink id=\"region-select-label\">\n              Регион\n            </InputLabel>\n            <Select\n              labelId=\"region-select-label\"\n              value={selectedRegion}\n              onChange={handleSelectedRegion}\n              input={<Input />}\n              MenuProps={{\n                anchorOrigin: {\n                  vertical: 'bottom',\n                  horizontal: 'left',\n                },\n                transformOrigin: {\n                  vertical: 'top',\n                  horizontal: 'left',\n                },\n                getContentAnchorEl: null,\n              }}\n            >\n              {regions && regions.map((region) => (\n                <MenuItem key={region.reg_ID} value={region}>\n                  <ListItemText primary={region.reg_alias_human_name} />\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item xs={7} style={{ paddingRight: '0px' }}>\n          <FormControl fullWidth>\n            <InputLabel shrink id=\"years-select-label\">\n              Год\n            </InputLabel>\n            <Select\n              labelId=\"years-select-label\"\n              value={selectedYear}\n              onChange={handleSelectedYearChange}\n              input={<Input />}\n              MenuProps={{\n                anchorOrigin: {\n                  vertical: 'bottom',\n                  horizontal: 'left',\n                },\n                transformOrigin: {\n                  vertical: 'top',\n                  horizontal: 'left',\n                },\n                getContentAnchorEl: null,\n              }}\n            >\n              {years && years.map((year) => (\n                <MenuItem key={year} value={year}>\n                  <ListItemText primary={year} />\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </Grid>\n      </Grid>\n      <RegionTable data={top} />\n    </>\n  );\n};\n\nexport default connect(\n  (state) => {\n    return {\n      top: state.statistic.top,\n    };\n  },\n  {\n    getStatisticForRegionTop,\n  },\n)(RegionRating);\n","import React from 'react';\nimport {\n  TableBody,\n  TableRow,\n  TableHead,\n  TableCell,\n  Table,\n  TableContainer,\n  Paper,\n} from '@material-ui/core';\n\nconst IndicatorTable = ({\n  data,\n}) => {\n  return (\n    <>\n      {data && data.length > 0 && (\n        <>\n          <TableContainer\n            border={1}\n            component={Paper}\n            style={{ marginTop: '16px' }}\n          >\n            <Table>\n              <TableHead className=\"table-head\">\n                <TableRow>\n                  <TableCell>Место</TableCell>\n                  <TableCell>Регион</TableCell>\n                  <TableCell>Значение</TableCell>\n                  <TableCell>Единицы измерения</TableCell>\n                </TableRow>\n              </TableHead>\n              <TableBody>\n                {data.map((statisticRow) => (\n                  <TableRow key={statisticRow.id}>\n                    <TableCell>{`${statisticRow.place}/85`}</TableCell>\n                    <TableCell>{statisticRow.Region.reg_alias_human_name}</TableCell>\n                    <TableCell>{statisticRow.value}</TableCell>\n                    <TableCell>{statisticRow.measurement_unit}</TableCell>\n                  </TableRow>\n                ))}\n              </TableBody>\n            </Table>\n          </TableContainer>\n        </>\n      )}\n    </>\n  );\n};\n\n\nexport default IndicatorTable;\n","import React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport {\n  ListItemText,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Select,\n  Input,\n  Grid,\n} from '@material-ui/core';\nimport IndicatorTable from './IndicatorTable';\nimport { getStatisticForIndicatorTop } from '../actions/statisticAction';\n\nconst IndicatorRating = ({\n  years,\n  indicators,\n  getStatisticForIndicatorTop,\n  top,\n}) => {\n  const [selectedYear, setSelectedYear] = React.useState(null);\n  const [selectedIndicator, setSelectedIndicator] = React.useState(null);\n\n\n  useEffect(() => {\n    if (selectedYear === null && years && years.length > 0) {\n      setSelectedYear(years[0]);\n    }\n  }, [years]);\n\n  useEffect(() => {\n    if (selectedIndicator === null && indicators && indicators.length > 0) {\n      setSelectedIndicator(indicators[0]);\n    }\n  }, [indicators]);\n\n  useEffect(() => {\n    if (selectedIndicator !== null && selectedYear !== null) {\n      getStatisticForIndicatorTop({ year: selectedYear, indicator: selectedIndicator });\n    }\n  }, [selectedYear, selectedIndicator]);\n\n  const handleSelectedYearChange = (event) => {\n    setSelectedYear(event.target.value);\n  };\n\n  const handleSelectedIndicator = (event) => {\n    setSelectedIndicator(event.target.value);\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        alignItems=\"flex-end\"\n        justify=\"space-between\"\n      >\n        <Grid item xs={4}>\n          <FormControl fullWidth>\n            <InputLabel shrink id=\"indicator-select-label\">\n              Индикатор\n            </InputLabel>\n            <Select\n              labelId=\"indicator-select-label\"\n              value={selectedIndicator}\n              onChange={handleSelectedIndicator}\n              input={<Input />}\n              MenuProps={{\n                anchorOrigin: {\n                  vertical: 'bottom',\n                  horizontal: 'left',\n                },\n                transformOrigin: {\n                  vertical: 'top',\n                  horizontal: 'left',\n                },\n                getContentAnchorEl: null,\n              }}\n            >\n              {indicators && indicators.map((indicator) => (\n                <MenuItem key={indicator.id} value={indicator}>\n                  <ListItemText primary={indicator.title} />\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </Grid>\n        <Grid item xs={7} style={{ paddingRight: '0px' }}>\n          <FormControl fullWidth>\n            <InputLabel shrink id=\"years-select-label\">\n              Год\n            </InputLabel>\n            <Select\n              labelId=\"years-select-label\"\n              value={selectedYear}\n              onChange={handleSelectedYearChange}\n              input={<Input />}\n              MenuProps={{\n                anchorOrigin: {\n                  vertical: 'bottom',\n                  horizontal: 'left',\n                },\n                transformOrigin: {\n                  vertical: 'top',\n                  horizontal: 'left',\n                },\n                getContentAnchorEl: null,\n              }}\n            >\n              {years && years.map((year) => (\n                <MenuItem key={year} value={year}>\n                  <ListItemText primary={year} />\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </Grid>\n      </Grid>\n      <IndicatorTable data={top} />\n    </>\n  );\n};\n\nexport default connect(\n  (state) => {\n    return {\n      top: state.statistic.top,\n    };\n  },\n  {\n    getStatisticForIndicatorTop,\n  },\n)(IndicatorRating);\n","\nimport React, { useState, useEffect } from 'react';\nimport {\n  LineChart,\n  Line,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  ResponsiveContainer,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport { randomColor } from '../constants/helpers';\n\n\nconst LineDiagram = ({ diagramStatistic }) => {\n  const [opacity, setOpacity] = useState({});\n  const [colors, setColors] = useState({});\n\n  useEffect(() => {\n    // const yKeys = Object.keys(diagramStatistic[0]).filter((key) => key !== 'year').map((stat, index) => ({ [stat]: 1 }));\n    const yKeys = Object.keys(diagramStatistic[0]).filter((key) => key !== 'year').reduce((a, value) => {\n      return { ...a, [value]: 1 };\n    }, {});\n    setOpacity(yKeys);\n    const newColors = Object.keys(diagramStatistic[0]).filter((key) => key !== 'year').reduce((a, value) => {\n      return { ...a, [value]: randomColor() };\n    }, {});\n    setColors(newColors);\n  }, [diagramStatistic]);\n\n  const handleMouseEnter = (o) => {\n    const { dataKey } = o;\n    setOpacity({ ...opacity, [dataKey]: 0.5 });\n  };\n\n  const handleMouseLeave = (o) => {\n    const { dataKey } = o;\n    setOpacity({ ...opacity, [dataKey]: 1 });\n  };\n  // const yKeys = Object.keys(diagramStatistic[0]).filter((key) => key !== 'year').reduce((a, value) => {\n  //   return {...a,[stat]: 1}\n  // },{});\n\n  return (\n    <>\n      <ResponsiveContainer>\n        <LineChart\n          data={diagramStatistic}\n          margin={{\n            top: 5, right: 30, left: 40, bottom: 5,\n          }}\n        >\n          {Object.keys(diagramStatistic[0]).filter((key) => key !== 'year').map((stat, index) => {\n            return (\n              <Line key={index} type=\"linear\" dataKey={stat} stroke={colors[stat]} strokeOpacity={opacity[stat]} activeDot={{ r: 8 }} />\n            );\n          },\n          )}\n          <Tooltip />\n          <Legend onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave} />\n          <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"3 3\" />\n          <XAxis\n            dataKey=\"year\"\n            type=\"category\"\n            // label=\"lol\"\n          />\n          <YAxis\n            unit={diagramStatistic.measurement_unit}\n          />\n        </LineChart>\n      </ResponsiveContainer>\n    </>\n  );\n};\n\nexport default LineDiagram;\n","\nimport React, { useState, useEffect } from 'react';\nimport {\n  BarChart,\n  Bar,\n  CartesianGrid,\n  XAxis,\n  YAxis,\n  ResponsiveContainer,\n  Tooltip,\n  Legend,\n} from 'recharts';\nimport { randomColor } from '../constants/helpers';\n\n\nconst BarDiagram = ({ diagramStatistic }) => {\n  const [opacity, setOpacity] = useState({});\n  const [colors, setColors] = useState({});\n\n  useEffect(() => {\n    // const yKeys = Object.keys(diagramStatistic[0]).filter((key) => key !== 'year').map((stat, index) => ({ [stat]: 1 }));\n    const yKeys = Object.keys(diagramStatistic[0]).filter((key) => key !== 'year').reduce((a, value) => {\n      return { ...a, [value]: 1 };\n    }, {});\n    setOpacity(yKeys);\n    const newColors = Object.keys(diagramStatistic[0]).filter((key) => key !== 'year').reduce((a, value) => {\n      return { ...a, [value]: randomColor() };\n    }, {});\n    setColors(newColors);\n  }, [diagramStatistic]);\n\n  const handleMouseEnter = (o) => {\n    const { dataKey } = o;\n    setOpacity({ ...opacity, [dataKey]: 0.5 });\n  };\n\n  const handleMouseLeave = (o) => {\n    const { dataKey } = o;\n    setOpacity({ ...opacity, [dataKey]: 1 });\n  };\n\n  // const yKeys = Object.keys(diagramStatistic[0]).filter((key) => key !== 'year').reduce((a, value) => {\n  //   return {...a,[stat]: 1}\n  // },{});\n\n  return (\n    <>\n      <ResponsiveContainer>\n        <BarChart\n          data={diagramStatistic}\n          margin={{\n            top: 5, right: 30, left: 40, bottom: 5,\n          }}\n        >\n          <CartesianGrid stroke=\"#ccc\" strokeDasharray=\"3 3\" />\n          <XAxis dataKey=\"year\" type=\"category\" />\n          <YAxis unit={diagramStatistic.measurement_unit} />\n          <Tooltip />\n          <Legend onMouseEnter={handleMouseEnter} onMouseLeave={handleMouseLeave} />\n          {Object.keys(diagramStatistic[0]).filter((key) => key !== 'year').map((stat, index) => {\n            return (\n              <Bar key={index} dataKey={stat} fill={colors[stat]} opacity={opacity[stat]} />\n            );\n          },\n          )}\n        </BarChart>\n      </ResponsiveContainer>\n    </>\n  );\n};\n\nexport default BarDiagram;\n","\nimport React, { useState, useEffect } from 'react';\nimport {\n  ResponsiveContainer,\n  Tooltip,\n  PolarGrid,\n  RadarChart,\n  PolarAngleAxis,\n  PolarRadiusAxis,\n  Radar,\n  Legend,\n} from 'recharts';\n\nimport { randomColor } from '../constants/helpers';\n\n\nconst RadarDiagram = ({ diagramStatistic }) => {\n  const [colors, setColors] = useState({});\n\n  useEffect(() => {\n    // const yKeys = Object.keys(diagramStatistic[0]).filter((key) => key !== 'year').map((stat, index) => ({ [stat]: 1 }));\n    const newColors = Object.keys(diagramStatistic[0]).filter((key) => key !== 'region').reduce((a, value) => {\n      return { ...a, [value]: randomColor() };\n    }, {});\n    setColors(newColors);\n  }, [diagramStatistic]);\n\n  //   year: \"2015\"\n  // Амурская область: 19.2\n  // Архангельская область: 8.65\n  // Астраханская область: 12.38\n  // Белгородская область: 4.81\n  // {\n  //   subject: 'History', A: 65, B: 85, fullMark: 150,\n  // },\n  // {\n  //   region: 'History', 2014: 65, 2015: 85, fullMark: 150,\n  // },\n\n  // const formattedDiagramStatistic = diagramStatistic.reduce((a, yearStatistic) => {\n  //   const newObj = Object.keys(yearStatistic.filter((key) => key !== 'year')).reduce((b, value) => {\n  //     b[value] = b[value] || {};\n  //     b[value] = { ...b[value], [yearStatistic.year]: yearStatistic[value] };\n  //     return b;\n  //   }, {});\n\n  //   a=newObj.map(()=>{\n\n  //   });\n  //   a.push({ year: yearStatistic.year, values: newObj });\n\n  //   return a;\n  // }, {});\n  // const formattedDiagramStatistic = diagramStatistic.reduce((a, yearStatistic) => {\n  //   const newObj = Object.keys(yearStatistic.filter((key) => key !== 'year')).reduce((b, value) => {\n  //     b.push({ region: value, value: yearStatistic[value] });\n  //     return b;\n  //   }, []);\n  //   a.push({ year: yearStatistic.year, values: newObj });\n  //   return a;\n  // }, []);\n\n  // const yKeys = Object.keys(diagramStatistic[0]).filter((key) => key !== 'year').reduce((a, value) => {\n  //   return {...a,[stat]: 1}\n  // },{});\n\n  return (\n    <>\n      <ResponsiveContainer>\n        <RadarChart\n          outerRadius={150}\n          margin={{\n            top: 5, right: 30, left: 20, bottom: 5,\n          }}\n          data={diagramStatistic}\n        >\n          <PolarGrid />\n          <PolarAngleAxis dataKey=\"region\" />\n          <PolarRadiusAxis />\n          {Object.keys(diagramStatistic[0]).filter((key) => key !== 'region').map((stat, index) => {\n            return (\n              <Radar key={index} dataKey={stat} stroke={colors[stat]} fill={colors[stat]} fillOpacity={0.6} />\n            );\n          },\n          )}\n          <Tooltip />\n          <Legend />\n        </RadarChart>\n      </ResponsiveContainer>\n    </>\n  );\n};\n\nexport default RadarDiagram;\n","import React, { useEffect, useRef } from 'react';\nimport clsx from 'clsx';\n\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport { connect } from 'react-redux';\nimport {\n  Button,\n  ListItemText,\n  Checkbox,\n  Chip,\n  MenuItem,\n  FormControl,\n  InputLabel,\n  Select,\n  Input,\n  Grid,\n  Typography,\n  IconButton,\n  TextField,\n} from '@material-ui/core';\n\nimport BarChartIcon from '@material-ui/icons/BarChart';\nimport TimelineIcon from '@material-ui/icons/Timeline';\n\nimport TrackChangesTwoToneIcon from '@material-ui/icons/TrackChangesTwoTone';\nimport { getStatisticForDiagram, getStatisticForRadarDiagram } from '../actions/statisticAction';\nimport LineDiagramm from '../components/LineDiagram';\nimport BarDiagram from '../components/BarDiagram';\nimport RadarDiagram from '../components/RadarDiagram';\nimport StatisticHeader from '../components/StatisticHeader';\n\n\nconst DiagramsTab = (props) => {\n  const {\n    currentIndicator,\n    diagramStatistic,\n    years,\n    regions,\n    getStatisticForDiagram,\n    radarDiagramStatistic,\n    getStatisticForRadarDiagram,\n  } = props;\n  const [selectedYears, setSelectedYears] = React.useState([]);\n  const [selectedRegions, setSelectedRegions] = React.useState([]);\n  const [selectedDiagram, setSelectedDiagram] = React.useState('line');\n\n  useEffect(() => {\n    // if (selectedRegions.length === 0) {\n    //   setSelectedRegions(regions);\n    // }\n    // if (selectedYears.length === 0) {\n    //   setSelectedYears(years);\n    // }\n  }, [diagramStatistic]);\n\n  useEffect(() => {\n    if (currentIndicator) {\n      setSelectedRegions([]);\n      setSelectedYears([]);\n      getStatisticForDiagram({ indicator: currentIndicator });\n      getStatisticForRadarDiagram({ indicator: currentIndicator });\n    }\n  }, [currentIndicator]);\n\n  const handleSelectedYearsChange = (event) => {\n    setSelectedYears(event.target.value);\n    getStatisticForDiagram({ indicator: currentIndicator, regions: selectedRegions, years: event.target.value });\n    getStatisticForRadarDiagram({ indicator: currentIndicator, regions: selectedRegions, years: event.target.value });\n  };\n\n  const handleSelectedRegions = (event, newValue) => {\n    setSelectedRegions(newValue);\n    getStatisticForDiagram({ indicator: currentIndicator, years: selectedYears, regions: newValue });\n    getStatisticForRadarDiagram({ indicator: currentIndicator, years: selectedYears, regions: newValue });\n  };\n\n  const diagrams = {\n    line: (<LineDiagramm diagramStatistic={diagramStatistic} />),\n    bar: (<BarDiagram diagramStatistic={diagramStatistic} />),\n    radar: (<RadarDiagram diagramStatistic={radarDiagramStatistic} />),\n  };\n\n  return (\n    <>\n      <Grid\n        container\n        alignItems=\"flex-end\"\n        justify=\"space-between\"\n      >\n        <Grid item xs={4}>\n          <Autocomplete\n            options={regions}\n            multiple\n            onChange={handleSelectedRegions}\n            value={selectedRegions}\n            noOptionsText=\"Не найдено\"\n            disableCloseOnSelect\n            // renderTags={() => {}}\n            // renderTags={(value, getTagProps) => (\n            //   <div>\n            //     <span style={{ whiteSpace: 'nowrap' }}>\n            //       {`${value.map((reg) => reg.reg_alias_human_name).join(', ')}`}\n            //     </span>\n            //   </div>\n            // )}\n            renderTags={(value, getTagProps) => (\n              <div className=\"chips\">\n                {value.map((reg) => (\n                  <Chip key={reg.reg_ID} label={reg.reg_alias_human_name} className=\"chips\" />\n                ))}\n              </div>\n            )}\n            getOptionLabel={(option) => option.reg_alias_human_name}\n            renderInput={(params) => (\n              <TextField\n                {...params}\n                label=\"Регионы\"\n                InputLabelProps={{ shrink: true }}\n              />\n            )}\n            // MenuProps={{\n            //   anchorOrigin: {\n            //     vertical: 'bottom',\n            //     horizontal: 'left',\n            //   },\n            //   transformOrigin: {\n            //     vertical: 'top',\n            //     horizontal: 'left',\n            //   },\n            //   getContentAnchorEl: null,\n            // }}\n            renderOption={(option, { selected }) => (\n              <>\n                <Checkbox\n                  style={{ marginRight: 8 }}\n                  checked={selected}\n                />\n                {option.reg_alias_human_name}\n              </>\n            )}\n            getOptionSelected={(option, value) => value.reg_ID === option.reg_ID}\n          />\n        </Grid>\n        <Grid item xs={7} style={{ paddingRight: '0px' }}>\n          <FormControl fullWidth>\n            <InputLabel shrink id=\"years-select-label\">\n              Годы\n            </InputLabel>\n\n            <Select\n              labelId=\"years-select-label\"\n              multiple\n              value={selectedYears || ''}\n              onChange={handleSelectedYearsChange}\n              input={<Input />}\n              renderValue={(selected) => (\n                <div className=\"chips\">\n                  {selected.map((value) => (\n                    <Chip key={value} label={value} className=\"chip\" />\n                  ))}\n                </div>\n              )}\n              MenuProps={{\n                anchorOrigin: {\n                  vertical: 'bottom',\n                  horizontal: 'left',\n                },\n                transformOrigin: {\n                  vertical: 'top',\n                  horizontal: 'left',\n                },\n                getContentAnchorEl: null,\n              }}\n            >\n              {years && years.map((year) => (\n                <MenuItem key={year} value={year}>\n                  <Checkbox checked={selectedYears.indexOf(year) > -1} />\n                  <ListItemText primary={year} />\n                </MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </Grid>\n      </Grid>\n      <Grid\n        container\n        style={{\n          justifyContent: 'space-between',\n          paddingTop: '16px',\n          alignItems: 'center',\n        }}\n      >\n        <Grid item>\n          <StatisticHeader currentIndicator={currentIndicator} selectedYears={selectedYears} />\n        </Grid>\n        <Grid item>\n          <IconButton\n            component=\"span\"\n            size=\"small\"\n            onClick={() => {\n              setSelectedDiagram('line');\n            }}\n            className={clsx('chart-button', selectedDiagram === 'line' && 'selected')}\n          >\n            <TimelineIcon />\n          </IconButton>\n          <IconButton\n            component=\"span\"\n            size=\"small\"\n            onClick={() => {\n              setSelectedDiagram('bar');\n            }}\n            className={clsx('chart-button', selectedDiagram === 'bar' && 'selected')}\n          >\n            <BarChartIcon />\n          </IconButton>\n          <IconButton\n            component=\"span\"\n            size=\"small\"\n            onClick={() => {\n              setSelectedDiagram('radar');\n            }}\n            className={clsx('chart-button', selectedDiagram === 'radar' && 'selected')}\n          >\n            <TrackChangesTwoToneIcon />\n          </IconButton>\n        </Grid>\n      </Grid>\n      <div style={{ width: '100%', height: '800px', marginTop: '16px' }}>\n        {diagramStatistic && diagramStatistic.length > 0\n          ? (diagrams[selectedDiagram]) : (\n            <div style={{\n              height: '100%',\n              textAlign: 'center',\n              fontSize: '25px',\n            }}\n            >\n              Необходимо выбрать как минимум 1 дату и 1 регион\n            </div>\n          )}\n      </div>\n\n    </>\n  );\n};\n\nexport default connect(\n  (state) => {\n    return {\n      diagramStatistic: state.statistic.diagramStatistic,\n      radarDiagramStatistic: state.statistic.radarDiagramStatistic,\n    };\n  },\n  {\n    getStatisticForDiagram,\n    getStatisticForRadarDiagram,\n  },\n)(DiagramsTab);\n","import React from 'react';\nimport TextField from '@material-ui/core/TextField';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport useMediaQuery from '@material-ui/core/useMediaQuery';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport { useTheme, makeStyles } from '@material-ui/core/styles';\nimport { VariableSizeList } from 'react-window';\nimport { Typography } from '@material-ui/core';\n\nconst LISTBOX_PADDING = 8;\n\nfunction renderRow(props) {\n  const { data, index, style } = props;\n  return React.cloneElement(data[index], {\n    style: {\n      ...style,\n      top: style.top + LISTBOX_PADDING,\n    },\n  });\n}\n\nconst OuterElementContext = React.createContext({});\n\nconst OuterElementType = React.forwardRef((props, ref) => {\n  const outerProps = React.useContext(OuterElementContext);\n  return <div ref={ref} {...props} {...outerProps} />;\n});\n\nfunction useResetCache(data) {\n  const ref = React.useRef(null);\n  React.useEffect(() => {\n    if (ref.current != null) {\n      ref.current.resetAfterIndex(0, true);\n    }\n  }, [data]);\n  return ref;\n}\n\n// Adapter for react-window\nconst ListboxComponent = React.forwardRef((props, ref) => {\n  const { children, ...other } = props;\n  const itemData = React.Children.toArray(children);\n  const theme = useTheme();\n  const smUp = useMediaQuery(theme.breakpoints.up('sm'), { noSsr: true });\n  const itemCount = itemData.length;\n  const itemSize = smUp ? 36 : 48;\n\n  const getChildSize = (child) => {\n    if (React.isValidElement(child) && child.type === ListSubheader) {\n      return 48;\n    }\n\n    return itemSize;\n  };\n\n  const getHeight = () => {\n    if (itemCount > 8) {\n      return 8 * itemSize;\n    }\n    return itemData.map(getChildSize).reduce((a, b) => a + b, 0);\n  };\n\n  const gridRef = useResetCache(itemCount);\n\n  return (\n    <div ref={ref}>\n      <OuterElementContext.Provider value={other}>\n        <VariableSizeList\n          itemData={itemData}\n          height={getHeight() + 2 * LISTBOX_PADDING}\n          width=\"100%\"\n          ref={gridRef}\n          outerElementType={OuterElementType}\n          innerElementType=\"ul\"\n          itemSize={(index) => getChildSize(itemData[index])}\n          overscanCount={5}\n          itemCount={itemCount}\n        >\n          {renderRow}\n        </VariableSizeList>\n      </OuterElementContext.Provider>\n    </div>\n  );\n});\n\nconst useStyles = makeStyles({\n  listbox: {\n    boxSizing: 'border-box',\n    '& ul': {\n      padding: 0,\n      margin: 0,\n    },\n  },\n});\n\nexport default function VirtualizedSelect({ options, label, ...rest }) {\n  const classes = useStyles();\n\n  return (\n    <Autocomplete\n      disableListWrap\n      classes={classes}\n      ListboxComponent={ListboxComponent}\n      noOptionsText=\"Не найдено\"\n      options={options}\n      renderInput={(params) => <TextField {...params} InputLabelProps={{ shrink: true }} label={label} />}\n      renderOption={(option) => <Typography noWrap key={option.id} value={option}>{option.title}</Typography>}\n      getOptionLabel={(option) => {\n        return option.title || '';\n      }}\n      getOptionSelected={(option, value) => value.id === option.id}\n      {...rest}\n    />\n  );\n}\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  Checkbox,\n  TextField,\n  Paper,\n  Chip,\n  Grid,\n} from '@material-ui/core';\nimport Autocomplete from '@material-ui/lab/Autocomplete';\nimport VirtualizedSelect from './VertualizedSelect';\n\n\nconst IndicatorSelectorCard = ({\n  handleSelectedCatogories,\n  categories, selectedCatogories,\n  currentIndicator, handleCurrentIndicatorChange,\n  indicators,\n}) => {\n  return (\n    <>\n      <Paper elevation={3} square style={{ padding: '24px' }}>\n        <Grid container direction=\"column\" spacing={2}>\n          <Grid item>\n            <Autocomplete\n              options={categories}\n              multiple\n              onChange={handleSelectedCatogories}\n              value={selectedCatogories}\n              noOptionsText=\"Не найдено\"\n              disableCloseOnSelect\n            // renderTags={() => {}}\n            // renderTags={(value, getTagProps) => (\n            //   <div>\n            //     <span style={{ whiteSpace: 'nowrap' }}>\n            //       {`${value.map((reg) => reg.reg_alias_human_name).join(', ')}`}\n            //     </span>\n            //   </div>\n            // )}\n              renderTags={(value, getTagProps) => (\n                <div className=\"chips\">\n                  {value.map((category) => (\n                    <Chip key={category.id} label={category.title} className=\"chips\" />\n                  ))}\n                </div>\n              )}\n              getOptionLabel={(option) => option.title}\n              renderInput={(params) => (\n                <TextField\n                  {...params}\n                  label=\"Категории индикаторов\"\n                  InputLabelProps={{ shrink: true }}\n                />\n              )}\n              renderOption={(option, { selected }) => (\n                <>\n                  <Checkbox\n                    style={{ marginRight: 8 }}\n                    checked={selected}\n                  />\n                  {option.title}\n                </>\n              )}\n              getOptionSelected={(option, value) => value.id === option.id}\n            />\n          </Grid>\n          <Grid item>\n            <VirtualizedSelect\n              id=\"grouped-select\"\n              label=\"Индикатор\"\n              value={currentIndicator || ''}\n              options={indicators || []}\n              onChange={handleCurrentIndicatorChange}\n            />\n          </Grid>\n        </Grid>\n      </Paper>\n    </>\n  );\n};\n\nexport default IndicatorSelectorCard;\n","import React, { useState, useEffect } from 'react';\nimport {\n  Tabs,\n  Tab,\n  Paper,\n  Box,\n  Container,\n  LinearProgress,\n  FormControl,\n  Radio,\n  RadioGroup,\n  FormLabel,\n  FormControlLabel,\n} from '@material-ui/core';\nimport { connect } from 'react-redux';\nimport { getIndicators } from '../actions/indicatorsAction';\nimport { getCategories } from '../actions/categoriesAction';\n\nimport { getStatisticByIndicator } from '../actions/statisticAction';\n\nimport MapTab from './MapTab';\nimport TableTab from './TableTab';\nimport RegionRating from './RegionRating';\nimport IndicatorRating from './IndicatorRating';\nimport DiagramsTab from './DiagramsTab';\nimport IndicatorSelectorCard from '../components/IndicatorSelectorCard';\n\nimport TabPanel from '../components/TabPanel';\n\nfunction getTabProps(index) {\n  return {\n    id: `tab-${index}`,\n    'aria-controls': `tabpanel-${index}`,\n    value: index,\n  };\n}\n\nfunction App({\n  statistic,\n  indicators,\n  getIndicators,\n  categories,\n  getCategories,\n  years,\n  getStatisticByIndicator,\n  regions,\n  isLoading,\n}) {\n  const [currentTab, setCurrentTab] = useState('map');\n\n  const [selectedRatingType, setSelectedRatingType] = useState('region');\n\n  const [currentIndicator, setCurrentIndicator] = useState(\n    indicators[0] || null,\n  );\n\n  const [selectedCatogories, setSelectedCatogories] = React.useState([]);\n\n  useEffect(() => {\n    setCurrentIndicator(indicators[0]);\n  }, [indicators]);\n\n  useEffect(() => {\n    if (currentIndicator) {\n      getStatisticByIndicator({ indicator: currentIndicator });\n    }\n  }, [currentIndicator]);\n\n  useEffect(() => {\n    if (!categories || categories.length === 0) getCategories();\n  });\n\n  useEffect(() => {\n    getIndicators(selectedCatogories);\n  }, [selectedCatogories]);\n\n\n  const handleTabChange = (event, newValue) => {\n    setCurrentTab(newValue);\n  };\n\n  const handleRatingType = (event, newValue) => {\n    setSelectedRatingType(newValue);\n  };\n\n  const handleCurrentIndicatorChange = (event, newValue) => {\n    setCurrentIndicator(newValue);\n  };\n\n  const handleSelectedCatogories = (event, newValue) => {\n    setSelectedCatogories(newValue);\n  };\n\n  return (\n    <Box>\n      {currentTab !== 'bar-map' && currentTab !== 'rating' && (\n      <Container>\n        <IndicatorSelectorCard\n          handleSelectedCatogories={handleSelectedCatogories}\n          categories={categories}\n          selectedCatogories={selectedCatogories}\n          currentIndicator={currentIndicator}\n          handleCurrentIndicatorChange={handleCurrentIndicatorChange}\n          indicators={indicators}\n        />\n      </Container>\n      )}\n      <div style={{ position: 'relative' }}>\n        <Container style={{ paddingTop: 20 }}>\n          <Paper elevation={3} square>\n            <Tabs\n              value={currentTab}\n              onChange={handleTabChange}\n              indicatorColor=\"primary\"\n              textColor=\"primary\"\n              variant=\"fullWidth\"\n            >\n              <Tab label=\"Карта\" {...getTabProps('map')} />\n              <Tab label=\"Диаграмма\" {...getTabProps('diagramm')} />\n              <Tab label=\"Рейтинг\" {...getTabProps('rating')} />\n              <Tab label=\"Исходные данные\" {...getTabProps('source-data')} />\n              <Tab label=\"Столбчатая карта\" {...getTabProps('bar-map')} />\n            </Tabs>\n            {\n          isLoading ? (<LinearProgress />)\n            : (\n              <>\n                <TabPanel value={currentTab} index=\"map\">\n                  <MapTab\n                    currentIndicator={currentIndicator}\n                    years={years}\n                    indicators={indicators}\n                  />\n                </TabPanel>\n                <TabPanel value={currentTab} index=\"diagramm\">\n                  <DiagramsTab\n                    currentIndicator={currentIndicator}\n                    years={years}\n                    regions={regions}\n                  />\n                </TabPanel>\n                <TabPanel value={currentTab} index=\"rating\">\n                  <FormControl component=\"fieldset\" fullWidth>\n                    <FormLabel component=\"legend\">Рейтинг по</FormLabel>\n                    <RadioGroup\n                      aria-label=\"rating-type\"\n                      name=\"rating-type\"\n                      value={selectedRatingType}\n                      onChange={handleRatingType}\n                      style={{ flexDirection: 'row' }}\n                    >\n                      <FormControlLabel value=\"region\" control={<Radio />} label=\"Региону\" />\n                      <FormControlLabel value=\"indicator\" control={<Radio />} label=\"Индикатору\" />\n                    </RadioGroup>\n                  </FormControl>\n                  {\n                    selectedRatingType === 'indicator'\n                      ? (<IndicatorRating years={years} indicators={indicators} />) : (\n                        <RegionRating years={years} regions={regions} />\n                      )\n                  }\n                </TabPanel>\n                <TabPanel value={currentTab} index=\"source-data\">\n                  <TableTab\n                    currentIndicator={currentIndicator}\n                    statistic={statistic}\n                    years={years}\n                    regions={regions}\n                  />\n                </TabPanel>\n                <TabPanel value={currentTab} index=\"bar-map\">\n                  <MapTab\n                    currentIndicator={currentIndicator}\n                    years={years}\n                    indicators={indicators}\n                    isBar\n                  />\n                </TabPanel>\n              </>\n            )\n          }\n          </Paper>\n        </Container>\n      </div>\n    </Box>\n  );\n}\n\nexport default connect(\n  (state) => {\n    return {\n      indicators: state.indicators.indicators,\n      categories: state.categories.categories,\n      statistic: state.statistic.statistic,\n      years: state.statistic.years.map((el) => parseInt(el.year)),\n      regions: state.statistic.regions,\n      isLoading: state.loading.isLoading,\n    };\n  },\n  {\n    getIndicators,\n    getCategories,\n    getStatisticByIndicator,\n  },\n)(App);\n","import { GET_CATEGORIES } from '../constants/categories';\nimport config from '../config/server';\nimport { handleError } from './alertAction';\nimport { handleLoadingFinished, handleLoadingStarted } from './loadingAction';\n\nexport const getCategories = () => async dispatch => {\n  try {\n    handleLoadingStarted();\n    const response = await fetch(`${config.protocol}://${config.server}:${config.port}/api/categories`, {\n      method: 'get',\n      headers: {\n        Authorization: localStorage.getItem('token'),\n        'Content-type': 'application/json; charset=UTF-8',\n      },\n    });\n\n    const json = await response.json();\n\n    if (json.error) {\n      throw new Error(json.message);\n    }\n    dispatch({\n      type: GET_CATEGORIES,\n      payload: {\n        items: json.items,\n      },\n    });\n    // dispatch({\n    //   type: OPEN_ALERT,\n    //   payload: {\n    //     message: { text: \"Пользователь успешно создан.\", type: \"success\" }\n    //   }\n    // });\n  } catch (err) {\n    handleError(dispatch, err);\n  } finally {\n    handleLoadingFinished();\n  }\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nimport { closeAlert } from '../actions/alertAction';\n\nfunction Alert(props) {\n  return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\nclass AlertContainer extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClose = this.handleClose.bind(this);\n  }\n\n  handleClose(event, reason) {\n    if (reason === 'clickaway' || !this.props.alert.setAlertOpen) {\n      return;\n    }\n    this.props.closeAlert();\n  }\n\n  render() {\n    return (\n      <Snackbar\n        open={this.props.alert.setAlertOpen}\n        autoHideDuration={6000}\n        onClose={this.handleClose}\n        anchorOrigin={{\n          vertical: 'bottom',\n          horizontal: 'center',\n        }}\n      >\n        <Alert\n          onClose={this.handleClose}\n          severity={this.props.alert.message.type}\n        >\n          {this.props.alert.message.text}\n        </Alert>\n      </Snackbar>\n    );\n  }\n}\nconst mapStateToProps = (store) => {\n  return {\n    alert: store.alert,\n  };\n};\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    closeAlert: () => dispatch(closeAlert()),\n  };\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(AlertContainer);\n","import {\n  colors,\n} from '@material-ui/core';\n\nconst white = '#FFFFFF';\n\nexport default {\n  primary: {\n    contrastText: white,\n    dark: colors.indigo[900],\n    main: colors.indigo[500],\n    light: colors.indigo[100],\n  },\n  secondary: {\n    contrastText: white,\n    dark: colors.blue[900],\n    main: colors.blue.A700,\n    light: colors.blue.A400,\n  },\n  error: {\n    contrastText: white,\n    dark: colors.red[900],\n    main: colors.red[600],\n    light: colors.red[400],\n  },\n  text: {\n    primary: colors.blueGrey[900],\n    secondary: colors.blueGrey[600],\n    link: colors.blue[600],\n  },\n  link: colors.blue[800],\n  icon: colors.blueGrey[600],\n  background: {\n    default: '#F4F6F8',\n    paper: white,\n  },\n  divider: colors.grey[200],\n};\n","import palette from './palette';\n\nexport default {\n  h1: {\n    color: palette.text.primary,\n    fontWeight: 500,\n    fontSize: '35px',\n    letterSpacing: '-0.24px',\n    lineHeight: '40px',\n  },\n  h2: {\n    color: palette.text.primary,\n    fontWeight: 500,\n    fontSize: '29px',\n    letterSpacing: '-0.24px',\n    lineHeight: '32px',\n  },\n  h3: {\n    color: palette.text.primary,\n    fontWeight: 500,\n    fontSize: '24px',\n    letterSpacing: '-0.06px',\n    lineHeight: '28px',\n  },\n  h4: {\n    color: palette.text.primary,\n    fontWeight: 500,\n    fontSize: '20px',\n    letterSpacing: '-0.06px',\n    lineHeight: '24px',\n  },\n  h5: {\n    color: palette.text.primary,\n    fontWeight: 500,\n    fontSize: '16px',\n    letterSpacing: '-0.05px',\n    lineHeight: '20px',\n  },\n  h6: {\n    color: palette.text.primary,\n    fontWeight: 500,\n    fontSize: '14px',\n    letterSpacing: '-0.05px',\n    lineHeight: '20px',\n  },\n  subtitle1: {\n    color: palette.text.primary,\n    fontSize: '16px',\n    letterSpacing: '-0.05px',\n    lineHeight: '25px',\n  },\n  subtitle2: {\n    color: palette.text.secondary,\n    fontWeight: 400,\n    fontSize: '14px',\n    letterSpacing: '-0.05px',\n    lineHeight: '21px',\n  },\n  body1: {\n    color: palette.text.primary,\n    fontSize: '14px',\n    letterSpacing: '-0.05px',\n    lineHeight: '21px',\n  },\n  body2: {\n    color: palette.text.secondary,\n    fontSize: '12px',\n    letterSpacing: '-0.04px',\n    lineHeight: '18px',\n  },\n  button: {\n    color: palette.text.primary,\n    fontSize: '14px',\n  },\n  caption: {\n    color: palette.text.secondary,\n    fontSize: '11px',\n    letterSpacing: '0.33px',\n    lineHeight: '13px',\n  },\n  overline: {\n    color: palette.text.secondary,\n    fontSize: '11px',\n    fontWeight: 500,\n    letterSpacing: '0.33px',\n    lineHeight: '13px',\n    textTransform: 'uppercase',\n  },\n};\n","import {\n  createMuiTheme,\n} from '@material-ui/core';\nimport palette from './palette';\nimport typography from './typography';\nimport overrides from './overrides';\n\nconst baseTheme = {\n  palette,\n  typography,\n  overrides,\n};\n\nconst theme = createMuiTheme(baseTheme);\nexport default theme;\n","import MuiButton from './MuiButton';\nimport MuiCardActions from './MuiCardActions';\nimport MuiCardContent from './MuiCardContent';\nimport MuiCardHeader from './MuiCardHeader';\nimport MuiChip from './MuiChip';\nimport MuiIconButton from './MuiIconButton';\nimport MuiInputBase from './MuiInputBase';\nimport MuiLinearProgress from './MuiLinearProgress';\nimport MuiListItem from './MuiListItem';\nimport MuiListItemIcon from './MuiListItemIcon';\nimport MuiOutlinedInput from './MuiOutlinedInput';\nimport MuiPaper from './MuiPaper';\nimport MuiTableCell from './MuiTableCell';\nimport MuiTableHead from './MuiTableHead';\nimport MuiTableRow from './MuiTableRow';\nimport MuiToggleButton from './MuiToggleButton';\nimport MuiTypography from './MuiTypography';\n\nexport default {\n  MuiButton,\n  MuiCardActions,\n  MuiCardContent,\n  MuiCardHeader,\n  MuiChip,\n  MuiIconButton,\n  MuiInputBase,\n  MuiLinearProgress,\n  MuiListItem,\n  MuiListItemIcon,\n  MuiOutlinedInput,\n  MuiPaper,\n  MuiTableCell,\n  MuiTableHead,\n  MuiTableRow,\n  MuiToggleButton,\n  MuiTypography,\n};\n","import {\n  colors,\n} from '@material-ui/core';\n\nexport default {\n  contained: {\n    boxShadow: '0 1px 1px 0 rgba(0,0,0,0.14)',\n    backgroundColor: colors.grey[100],\n    '&:hover': {\n      backgroundColor: colors.grey[300],\n    },\n  },\n};\n","export default {\n  root: {\n    padding: '16px 24px',\n  },\n};\n","export default {\n  root: {\n    padding: 24,\n  },\n};\n","export default {\n  root: {\n    padding: '16px 24px',\n  },\n};\n","import {\n  colors,\n} from '@material-ui/core';\n\nexport default {\n  root: {\n    backgroundColor: colors.blueGrey[50],\n    color: colors.blueGrey[900],\n  },\n  deletable: {\n    '&:focus': {\n      backgroundColor: colors.blueGrey[100],\n    },\n  },\n};\n","import palette from '../palette';\n\nexport default {\n  root: {\n    color: palette.icon,\n    '&:hover': {\n      backgroundColor: 'rgba(0, 0, 0, 0.03)',\n    },\n  },\n};\n","import palette from '../palette';\n\nexport default {\n  root: {},\n  input: {\n    '&::placeholder': {\n      opacity: 1,\n      color: palette.text.secondary,\n    },\n  },\n};\n","import {\n  colors,\n} from '@material-ui/core';\n\nexport default {\n  root: {\n    borderRadius: 3,\n    overflow: 'hidden',\n  },\n  colorPrimary: {\n    backgroundColor: colors.blueGrey[50],\n  },\n};\n","export default {\n  button: {\n    '&:hover': {\n      backgroundColor: 'rgba(0, 0, 0, 0.04)',\n    },\n  },\n};\n","import palette from '../palette';\n\nexport default {\n  root: {\n    color: palette.icon,\n    minWidth: 32,\n  },\n};\n","export default {\n  root: {},\n  notchedOutline: {\n    borderColor: 'rgba(0,0,0,0.15)',\n  },\n};\n","export default {\n  root: {},\n  elevation1: {\n    boxShadow: '0 0 0 1px rgba(63,63,68,0.05), 0 1px 3px 0 rgba(63,63,68,0.15)',\n  },\n};\n","import palette from '../palette';\nimport typography from '../typography';\n\nexport default {\n  root: {\n    ...typography.body1,\n    borderBottom: `1px solid ${palette.divider}`,\n  },\n};\n","import {\n  colors,\n} from '@material-ui/core';\n\nexport default {\n  root: {\n    backgroundColor: colors.grey[50],\n  },\n};\n","import palette from '../palette';\n\nexport default {\n  root: {\n    '&$selected': {\n      backgroundColor: palette.background.default,\n    },\n    '&$hover': {\n      '&:hover': {\n        backgroundColor: palette.background.default,\n      },\n    },\n  },\n};\n","import palette from '../palette';\n\nexport default {\n  root: {\n    color: palette.icon,\n    '&:hover': {\n      backgroundColor: 'rgba(208, 208, 208, 0.20)',\n    },\n    '&$selected': {\n      backgroundColor: 'rgba(208, 208, 208, 0.20)',\n      color: palette.primary.main,\n      '&:hover': {\n        backgroundColor: 'rgba(208, 208, 208, 0.30)',\n      },\n    },\n    '&:first-child': {\n      borderTopLeftRadius: 4,\n      borderBottomLeftRadius: 4,\n    },\n    '&:last-child': {\n      borderTopRightRadius: 4,\n      borderBottomRightRadius: 4,\n    },\n  },\n};\n","export default {\n  gutterBottom: {\n    marginBottom: 8,\n  },\n};\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { withRouter, Link as RouterLink } from 'react-router-dom';\n\nimport {\n  Typography,\n  Toolbar,\n  AppBar,\n  Grid,\n  Hidden,\n  Drawer,\n  List,\n  Divider,\n  ListSubheader,\n} from '@material-ui/core';\nimport { white } from 'material-ui/styles/colors';\n\nclass TopAppBar extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      driverIsOpen: false,\n    };\n  }\n\n  signOut = () => {\n  }\n\n  render() {\n    const { driverIsOpen } = this.state;\n    return (\n      <AppBar position=\"static\" style={{ marginBottom: '20px' }}>\n        <Toolbar>\n          <Grid container direction=\"row\" alignItems=\"flex-end\" justify=\"space-between\" spacing={1}>\n            <Grid item>\n              <Grid container direction=\"row\" alignItems=\"center\" justify=\"flex-start\" spacing={1}>\n                <Hidden xsDown>\n                  <Grid item>\n                    <RouterLink to=\"/\">\n                      <Typography variant=\"h2\" style={{ color: white }}>Платформа для отображения данных</Typography>\n                    </RouterLink>\n                  </Grid>\n                </Hidden>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Toolbar>\n        <Drawer\n          anchor=\"left\"\n          open={driverIsOpen}\n          onClose={() => this.setState({ driverIsOpen: false })}\n        >\n\n          <Divider />\n          <List\n            onClick={() => this.setState({ driverIsOpen: false })}\n            subheader={(\n              <ListSubheader>\n                Платформа для отображения данных\n              </ListSubheader>\n            )}\n          />\n          {/* <ListItem button component={RouterLink} to=\"/\">\n              <ListItemIcon>\n                <ListRoundedIcon />\n              </ListItemIcon>\n              <ListItemText primary=\"Список проектов\" />\n            </ListItem> */}\n        </Drawer>\n      </AppBar>\n    );\n  }\n}\n\nexport default withRouter(connect(\n  (state) => ({\n  }),\n  (dispatch) => ({\n  }),\n)(TopAppBar));\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {\n  BrowserRouter as Router,\n} from 'react-router-dom';\nimport {\n  ThemeProvider,\n} from '@material-ui/styles';\nimport { Provider } from 'react-redux';\nimport store from './store';\nimport App from './containers/App';\nimport AlertContainer from './containers/AlertContainer';\nimport theme from './theme';\nimport './index.css';\nimport TopAppBar from './containers/TopAppBar';\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <ThemeProvider theme={theme}>\n      <Router>\n        <TopAppBar />\n        <App />\n        <AlertContainer />\n      </Router>\n    </ThemeProvider>\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}